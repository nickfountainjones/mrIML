[{"path":"https://github.com/nickfountainjones/mrIML/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 mrIML team Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"setting-up-the-models","dir":"Articles","previous_headings":"","what":"Setting up the models","title":"Graphical network model (GNM)","text":"Built MrIML architecture (big advantage Tidymodels) capability change underlying model easily. going set two models compare: random forest model (RF) logistic regression (lm). MrIML takes advantage multi-core processing set run 5 cores. steps MrIML 1.0.","code":"model_rf <-rand_forest(trees = 100,                        mode = \"classification\",                        mtry = tune(),                        min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000           set_engine(\"randomForest\")  model_lm <- logistic_reg() %>%   set_engine(\"glm\") %>%   set_mode(\"classification\")"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"running-the-models","dir":"Articles","previous_headings":"","what":"Running the models","title":"Graphical network model (GNM)","text":"Aside adding JSDM functionality X1 call, also enabled MrIML tune hyperparameters using efficient ‘racing’ option (see Kuhn (2014)). brief, racing option take small subsample parameters eliminates parameter combinations improve fit using repeated measure ANOVA model. Turning racing ‘FALSE’ goes back grid search want manually set tuning grid size. logistic regression parameters tune set ‘FALSE’.","code":"#random forest yhats_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5,   racing = TRUE ) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%  #linear model yhats_lm <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_lm ,    balance_data = 'no',   prop = 0.6,   k = 5,   racing = FALSE ) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100% #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters?"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"comparing-performance","dir":"Articles","previous_headings":"","what":"Comparing performance","title":"Graphical network model (GNM)","text":"’s important compare advantages using random forest approach. Interpreation easier overall logistic regression gave similar predictive performance.   just look overall AUC values, looks like model performance quite similar (0.86 rf 0.81 lm). However, look Mathew’s correlation coefficient (MCC) taxa lm model see H.killangoi Plas (Plasmodium) values much lower (e.g. 0.02, basically just guess) compared 0.31 rf). Remember classes imbalanced AUC tends inflated measure. evidence non-linear relationships can make difference prediction overall. interrogate rf model . now ask including putative associations taxa improves model performance overall relationship parasites host relative abundance enough. can see overall including associations improved model performance overall particularly predicting H.killangoi Microfilaria. Using MCC compare models problematic association free model defined taxa (NA, probably false negatives low prevalence taxa association-free model). Positive predictive value (PPV) useful case shows without associations can’t predict occurrence taxa (PPV=0 ). Including associations increases PPV ~0.2 - great 80% positive predictions taxa false.","code":"ModelPerf_rf <- mrIMLperformance(yhats_rf) #> Warning: NAs produced when calculating MCC. This is common when there is a #> class imbalance. Substituting NA values with zero.  ModelPerf_rf[[1]] #across all parasites #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.951 0.714       0.941 0.923       0.758     0.265  #> 2 Hkillangoi   rand_fore…   0.790 0.218       0.918 0.926       0.308     0.116  #> 3 Plas         rand_fore…   0.902 0.438       0.955 0.875       0.4       0.196  #> 4 Microfilaria rand_fore…   0.905 0           1     0.896       0         0.0980 ModelPerf_rf[[2]] #overall #> [1] 0.3426539  ModelPerf_lm <- mrIMLperformance(yhats_lm)  ModelPerf_lm[[1]] #> # A tibble: 4 × 8 #>   response    model_name roc_AUC    mcc sensitivity   ppv specificity prevalence #>   <chr>       <chr>        <dbl>  <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis logistic_…   0.810 0.335        0.922 0.776      0.346      0.265  #> 2 Hkillangoi  logistic_…   0.657 0.0520       0.975 0.897      0.0526     0.116  #> 3 Plas        logistic_…   0.774 0.119        0.972 0.815      0.0857     0.196  #> 4 Microfilar… logistic_…   0.878 0.362        0.975 0.930      0.294      0.0980 ModelPerf_lm[[2]] #> [1] 0.2169666  plots <- mrPerformancePlot(ModelPerf1=ModelPerf_lm,                            ModelPerf2=ModelPerf_rf,                            mode='classification' )  plots[[1]] plots[[2]] plots[[3]] #> # A tibble: 4 × 6 #>   response  metric_metric_logist…¹ metric_metric_rand_f…² outlier_outlier_logi…³ #>   <chr>                      <dbl>                  <dbl> <lgl>                  #> 1 Hzostero…                 0.335                   0.714 NA                     #> 2 Hkillang…                 0.0520                  0.218 NA                     #> 3 Plas                      0.119                   0.438 NA                     #> 4 Microfil…                 0.362                   0     NA                     #> # ℹ abbreviated names: ¹​metric_metric_logistic_reg, ²​metric_metric_rand_forest, #> #   ³​outlier_outlier_logistic_reg #> # ℹ 2 more variables: outlier_outlier_rand_forest <lgl>, diff_mod1_2 <dbl> yhats_rf_noAssoc <- mrIMLpredicts(X = X,                                   Y = Y,                                   Model = model_rf,                                   prop=0.7,                                   k=5,                                   racing=T) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%  ModelPerf_rf_noAssoc <- mrIMLperformance(yhats_rf_noAssoc) #> Warning: NAs produced when calculating MCC. This is common when there is a #> class imbalance. Substituting NA values with zero.  ModelPerf_rf_noAssoc[[1]] #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.869 0.544       0.891 0.882       0.647     0.265  #> 2 Hkillangoi   rand_fore…   0.678 0           1     0.948       0         0.116  #> 3 Plas         rand_fore…   0.746 0.475       0.889 0.897       0.593     0.196  #> 4 Microfilaria rand_fore…   0.801 0.459       1     0.947       0.222     0.0980 ModelPerf_rf[[1]] #performance including associations #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.951 0.714       0.941 0.923       0.758     0.265  #> 2 Hkillangoi   rand_fore…   0.790 0.218       0.918 0.926       0.308     0.116  #> 3 Plas         rand_fore…   0.902 0.438       0.955 0.875       0.4       0.196  #> 4 Microfilaria rand_fore…   0.905 0           1     0.896       0         0.0980"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"downsampling","dir":"Articles","previous_headings":"","what":"Downsampling","title":"Graphical network model (GNM)","text":"Including associations makes difference, can better predicting two rarer taxa? sampling possible case ’ll try sampling see correcting class imbalance improves model fit. Look PPV values now - much better. false positive rate ~ < 15% overall. Now happy performance model, now can interrogate .","code":"yhats_rf_downSamp <- mrIMLpredicts(X=X,                                    Y=Y,                                    X1=Y,                                    Model=model_rf,                                    balance_data='down', #down sampling                                    prop=0.75,                                    k=5,                                    racing=T) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%  ModelPerf_rf_downSamp <- mrIMLperformance(yhats_rf_downSamp)  ModelPerf_rf_downSamp[[1]] #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.903 0.600       0.802 0.929       0.844     0.265  #> 2 Hkillangoi   rand_fore…   0.901 0.430       0.740 1           1         0.116  #> 3 Plas         rand_fore…   0.863 0.525       0.739 0.956       0.88      0.196  #> 4 Microfilaria rand_fore…   0.942 0.448       0.760 1           1         0.0980"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"interpreting-the-model","dir":"Articles","previous_headings":"","what":"Interpreting the model","title":"Graphical network model (GNM)","text":"many cases, like data set, community microbiome data tend small size. apply stochastic machine learning algorithms data, can lead challenges. instance, importance variables may vary substantially create multiple models using data algorithm. handle variability better understand prediction uncertainty, MrIML 2.0 functionality capture uncertainty tuned model using bootstraps. Additionally, approach helps us estimate variables affect response, estimates align results obtained traditional linear regression models (see Cook et al., 2021). MrIML2.0 makes easy get bootstrap estimates variety interpretable machine learning tools, uses estimates construct marginalized co-occurrence networks. First, lets bootstrapping calculate variable importance.  can see host abundance important predictor parasite community (followed H.zosteropsis) . However, second figure shows important variability. example, H.zosteropsis important predictor occurence Microfilaria, host abundance (shortened sc..) less important.","code":"future::plan(cluster, workers=5) #do bootstraps. bs_malaria <- mrBootstrap(yhats_rf,                           num_bootstrap = 100,                           downsample = FALSE) #>   |                                                                              |                                                                      |   0%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |==                                                                    |   4%  |                                                                              |===                                                                   |   4%  |                                                                              |===                                                                   |   5%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |=====                                                                 |   8%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |=========                                                             |  14%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  16%  |                                                                              |============                                                          |  17%  |                                                                              |============                                                          |  18%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  22%  |                                                                              |================                                                      |  23%  |                                                                              |================                                                      |  24%  |                                                                              |=================                                                     |  24%  |                                                                              |=================                                                     |  25%  |                                                                              |==================                                                    |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |===================                                                   |  28%  |                                                                              |====================                                                  |  28%  |                                                                              |====================                                                  |  29%  |                                                                              |=====================                                                 |  30%  |                                                                              |======================                                                |  31%  |                                                                              |======================                                                |  32%  |                                                                              |=======================                                               |  32%  |                                                                              |=======================                                               |  33%  |                                                                              |=======================                                               |  34%  |                                                                              |========================                                              |  34%  |                                                                              |========================                                              |  35%  |                                                                              |=========================                                             |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |==========================                                            |  38%  |                                                                              |===========================                                           |  38%  |                                                                              |===========================                                           |  39%  |                                                                              |============================                                          |  40%  |                                                                              |=============================                                         |  41%  |                                                                              |=============================                                         |  42%  |                                                                              |==============================                                        |  42%  |                                                                              |==============================                                        |  43%  |                                                                              |==============================                                        |  44%  |                                                                              |===============================                                       |  44%  |                                                                              |===============================                                       |  45%  |                                                                              |================================                                      |  45%  |                                                                              |================================                                      |  46%  |                                                                              |=================================                                     |  46%  |                                                                              |=================================                                     |  47%  |                                                                              |=================================                                     |  48%  |                                                                              |==================================                                    |  48%  |                                                                              |==================================                                    |  49%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================                                  |  51%  |                                                                              |====================================                                  |  52%  |                                                                              |=====================================                                 |  52%  |                                                                              |=====================================                                 |  53%  |                                                                              |=====================================                                 |  54%  |                                                                              |======================================                                |  54%  |                                                                              |======================================                                |  55%  |                                                                              |=======================================                               |  55%  |                                                                              |=======================================                               |  56%  |                                                                              |========================================                              |  56%  |                                                                              |========================================                              |  57%  |                                                                              |========================================                              |  58%  |                                                                              |=========================================                             |  58%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  60%  |                                                                              |===========================================                           |  61%  |                                                                              |===========================================                           |  62%  |                                                                              |============================================                          |  62%  |                                                                              |============================================                          |  63%  |                                                                              |============================================                          |  64%  |                                                                              |=============================================                         |  64%  |                                                                              |=============================================                         |  65%  |                                                                              |==============================================                        |  65%  |                                                                              |==============================================                        |  66%  |                                                                              |===============================================                       |  66%  |                                                                              |===============================================                       |  67%  |                                                                              |===============================================                       |  68%  |                                                                              |================================================                      |  68%  |                                                                              |================================================                      |  69%  |                                                                              |=================================================                     |  70%  |                                                                              |==================================================                    |  71%  |                                                                              |==================================================                    |  72%  |                                                                              |===================================================                   |  72%  |                                                                              |===================================================                   |  73%  |                                                                              |===================================================                   |  74%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |=====================================================                 |  75%  |                                                                              |=====================================================                 |  76%  |                                                                              |======================================================                |  76%  |                                                                              |======================================================                |  77%  |                                                                              |======================================================                |  78%  |                                                                              |=======================================================               |  78%  |                                                                              |=======================================================               |  79%  |                                                                              |========================================================              |  80%  |                                                                              |=========================================================             |  81%  |                                                                              |=========================================================             |  82%  |                                                                              |==========================================================            |  82%  |                                                                              |==========================================================            |  83%  |                                                                              |==========================================================            |  84%  |                                                                              |===========================================================           |  84%  |                                                                              |===========================================================           |  85%  |                                                                              |============================================================          |  85%  |                                                                              |============================================================          |  86%  |                                                                              |=============================================================         |  86%  |                                                                              |=============================================================         |  87%  |                                                                              |=============================================================         |  88%  |                                                                              |==============================================================        |  88%  |                                                                              |==============================================================        |  89%  |                                                                              |===============================================================       |  90%  |                                                                              |================================================================      |  91%  |                                                                              |================================================================      |  92%  |                                                                              |=================================================================     |  92%  |                                                                              |=================================================================     |  93%  |                                                                              |=================================================================     |  94%  |                                                                              |==================================================================    |  94%  |                                                                              |==================================================================    |  95%  |                                                                              |===================================================================   |  95%  |                                                                              |===================================================================   |  96%  |                                                                              |====================================================================  |  96%  |                                                                              |====================================================================  |  97%  |                                                                              |====================================================================  |  98%  |                                                                              |===================================================================== |  98%  |                                                                              |===================================================================== |  99%  |                                                                              |======================================================================| 100%  #make sure downsample=TRUE as this did improve performance #just 10 bootstraps to keep this short. We suggest using more for a final analysis (100 is reasonable but depends on how big the data is)  #up to here -not working properly bs_impVI <- mrVip(   mrIMLobj = yhats_rf,   mrBootstrap_obj = bs_malaria,   model_perf = ModelPerf_rf,   taxa = \"Plas\" )  bs_impVI[[3]]  #importance plot. There are plenty of other insights possible #the 'global_top_var' provides a limit to how many predictors are included in the community-wide plot. 'local_top_var provides a limit to the number of individual taxa plots. The threshold excludes plotting individual importance plots for taxa not well predicted by the model."},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"bootstrap-partial-dependence-plots","dir":"Articles","previous_headings":"","what":"Bootstrap partial dependence plots","title":"Graphical network model (GNM)","text":"look relationship variable community structure, MrIML 2.0 convenient wrapper plot bootsrapped partial dependencies taxa interest.  plots show , example, presence Microfilaria greatly increass probability observing Plasmodium (~0.32 0.58 holding variables mean value). Note marginal relationships (.e. isolating effect just predictor). host abundance high probability detecting Plasmodium descreases non-linearly (threshold around ~0). parasites less effect. want explore effect host abundance overall can use ‘mr_Covar’ function. Note isn’t bootstrapped now - line represents taxon case. second plot shows community-wide change occurrence probabilities across host abundance. Note occurrence probabilities taxa drop intermediate levels host abundance (0.75-1.25).","code":"pds <- mrPdPlotBootstrap(   yhats_rf,   mrBootstrap_obj=bs_malaria,   vi_obj=bs_impVI,   target='Plas',   global_top_var=5 ) pds[[2]] covar <- mrCovar(yhats_rf,                   var='scale.prop.zos',                   sdthresh =0.01)  covar[[1]] /   covar[[2]] /   covar[[3]]"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"co-occurrence-network","dir":"Articles","previous_headings":"","what":"Co-occurrence network","title":"Graphical network model (GNM)","text":"can utilise bootstrapped partial dependence estimates (pds) construct co-occurrence network. show object can converted igraph object plotted. directed network edges scaled standard deviation marginal change prediction. Red positive associations (predicted occurrence taxa increases presence ) blue negative (predicted occurrence taxa decreases presence ). ## 1 way, 2 way 3 way interactions Finally, can quantify importance interactions overall well one two-way interaction importance using bootstrap approach.See https://github.com/mayer79/hstats details method. first plot shows interactions account average 27% (bootstrap interval 23-34%) variation predictions H.killangoi less taxa. second plot shows interactions involving host abundance impacts predictions Plasmodium (H.zosteropis also important). trend similar community-wide. next plot shows interaction Haemoproteus species important 2-way interaction Plasmodium isn’t true community wide host abudance H.zosteropis strongest interaction overall. Taken together, can see interactions taxa mediated host abundance. Finally, can explore specific interactions detail using 2D partial dependence plots. case choose one important 2-way interactions impacting probability detetcting Plasmodium. H.zosteropsis present relative abundance Zosterops species low probability observing Plasmodium high (~>0.7).","code":"assoc_net<- mrCoOccurNet(bs_malaria)  assoc_net_filtered <-  assoc_net %>%    filter(mean_strength > 0.05) #based on our simulations the following rule of thumb for associations. Any association  < 0.05  for mean strength is included.  #convert to igraph g <- graph_from_data_frame(assoc_net_filtered,                            directed=TRUE,                            vertices=names(Y)) #matching Y data  E(g)$Value <- assoc_net_filtered$mean_strength  E(g)$Color <- ifelse(assoc_net_filtered$direction == \"negative\", \"blue\", \"red\")  # Convert the igraph object to a ggplot object with NMDS layout gg <- ggnetwork(g)  # Plot the graph ggplot(gg, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_edges(aes(color = Color, linewidth = (Value)),               curvature = 0.2,              arrow = arrow(length = unit(5, \"pt\"),                            type = \"closed\")) +    geom_nodes(color = \"gray\", size = degree(g, mode = \"out\")/2)+   scale_color_identity() +   theme_void() +   theme(legend.position = \"none\")  +   geom_nodelabel_repel(aes(label = name),                        box.padding = unit(0.5, \"lines\"),                        data = gg,                        size=2,                        segment.colour = \"black\",                        colour = \"white\", fill = \"grey36\") int_ <- mrInteractions(yhats_rf,                        num_bootstrap=10,                        feature = 'Plas',                        top_int=10) #10 bootstraps to keep it short. top int focusses on the 10 top interactions (all of them in this case).  int_[[1]] /# overall plot int_[[2]] /# individual plot for the response of choice  int_[[3]] #two way plot fl <- mrFlashlight(yhats_rf_downSamp,                    response = \"single\",                    index=4) #index=4 selects Plasmodium  light_profile2d(fl,c(\"scale.prop.zos\",\"Hzosteropis\"), data) %>%   plot() +   theme_bw()"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Graphical network model (GNM).html","id":"references","dir":"Articles","previous_headings":"Co-occurrence network","what":"References","title":"Graphical network model (GNM)","text":"Cook et al., 2021: https://doi.org/10.18651/RWP2021-12 Kuhn (2014): https://doi.org/10.48550/arXiv.1405.6974 Fountain-Jones et al(2021): https://doi.org/10.1111/1755-0998.13495","code":""},{"path":"https://github.com/nickfountainjones/mrIML/articles/Microbiome data curation.html","id":"creating-names","dir":"Articles","previous_headings":"","what":"Creating names","title":"Microbiome data curation","text":"next functions take ASV table data make unique names new column taxa table. Now can start fomatting Y (response data) ready MrIML. includes filtering rare common taxa. Now good go MrIML 2.0 grahical network models can generated!","code":"#make sure names match final_ASV_table <- asv_data final_ASV_table$ASV <- asv_taxa_table$Name_comp1   #add row names final_ASV_table_r <- final_ASV_table %>%    column_to_rownames(var='ASV') #get into right format for MrIML final_ASV_table_df <-as.data.frame(t(final_ASV_table_r ))  #make presence/absence pa_ASV_table <- final_ASV_table_df %>%    mutate_all(~ ifelse(. > 0, 1, .))  #remove rare and common ASVs Y <- filterRareCommon(pa_ASV_table , lower=0.1, higher=0.9) %>%    dplyr::select(sort(names(.))) #0.2  colnames(Y) <- sub(\".*_(.*_.*)$\", \"\\\\1\", colnames(Y))  ## Find duplicated column names duplicated_cols <- duplicated(colnames(Y))  colnames(Y) <- make.names(colnames(Y), unique = TRUE)  #more tidying Y <- Y %>%    rename_all(~make.names(str_remove_all(., \"`\")))  # Shorten the part to the left of the underscore to 4 characters  abbreviate_names <- function(names_vector) {   abbreviated_names <- sapply(strsplit(names_vector, \"_\"), function(parts) {     first_part <- substr(parts[1], 1, 4)     second_part <- parts[2]     return(paste(first_part, second_part, sep = \"_\"))   })   return(abbreviated_names) }  # Use the function to shorten the names( modified_col_names <- abbreviate_names(colnames(Y))  colnames(Y) <- modified_col_names glimpse(Y) #> Rows: 9 #> Columns: 1,427 #> $ Taxo_Taxon.11.1.1            <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Taxo_Taxon.13.1.1            <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Taxo_Taxon.4.1.1             <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ X.Ba_2.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ X.Ba_4.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_.Barnesiellaceae..1     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Bact_.Barnesiellaceae..2     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Baci_.Exiguobacteraceae..1   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ X.Mo_10.1                    <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ X.Mo_11.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ X.Mo_13.1                    <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ X.Mo_15.1                    <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ X.Mo_25.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ X.Mo_28.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ X.Mo_29.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ X.Mo_3.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ X.Mo_31.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_40.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ X.Mo_41.1                    <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ X.Mo_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ X.Mo_44.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_45.1                    <dbl> 1, 0, 0, 1, 0, 1, 0, 1, 1 #> $ X.Mo_5.1                     <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1 #> $ X.Mo_52.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_53.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_56.1                    <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ X.Mo_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_8.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ X.Mo_9.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Clos_.Mogibacteriaceae..1    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Od_2.1                     <dbl> 1, 0, 0, 1, 1, 1, 1, 0, 0 #> $ X.Od_3.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ X.Od_4.1                     <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 0 #> $ X.Od_5.1                     <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 0 #> $ Bact_.Odoribacteraceae..1    <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 0 #> $ Bact_.Odoribacteraceae..2    <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ X.Od_2.1.1                   <dbl> 0, 0, 1, 1, 0, 1, 1, 1, 1 #> $ X.Od_3.1.1                   <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 1 #> $ Bact_.Odoribacteraceae..1.1  <dbl> 0, 0, 1, 1, 0, 0, 1, 1, 0 #> $ X.Ti_2.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ X.Ti_3.1                     <dbl> 1, 0, 0, 1, 1, 0, 0, 1, 0 #> $ X.Ti_5.1                     <dbl> 1, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Acho_3.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Acho_4.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Acho_5.1.1                   <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Acho_Acholeplasmatales.1.1   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Acho_Acholeplasmatales.2.1   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Alca_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Burk_Alcaligenaceae.2        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_10.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Anae_11.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_4.1                     <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Anae_5.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_6.1                     <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Anae_7.1                     <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Anae_Anaeroplasmataceae.1    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Baci_3.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_10.1                    <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Bact_11.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_12.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_13.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_14.1                    <dbl> 1, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Bact_15.1                    <dbl> 1, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Bact_16.1                    <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_17.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_20.1                    <dbl> 1, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Bact_21.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Bact_22.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Bact_23.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Bact_24.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Bact_25.1                    <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Bact_26.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Bact_27.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_28.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Bact_29.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Bact_30.1                    <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 1 #> $ Bact_31.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 1 #> $ Bact_34.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Bact_35.1                    <dbl> 0, 0, 1, 1, 1, 1, 0, 0, 0 #> $ Bact_38.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Bact_39.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Bact_41.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_8.1                     <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Bact_9.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_Bacteroidaceae.1        <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_Bacteroidaceae.2        <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Bact_2.1.1                   <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Bact_Bacteroidaceae.2.1      <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_Bacteroidaceae.1.1      <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_Bacteroidaceae.1.2      <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Bact_2.1.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Bifi_2.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Bifi_Bifidobacteriaceae.1    <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Bifi_Bifidobacteriaceae.2    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Camp_Campylobacteraceae.2    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Chri_100.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_103.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_106.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_114.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_115.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_119.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Chri_12.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Chri_120.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_125.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_128.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Chri_130.1                   <dbl> 1, 1, 0, 0, 0, 0, 1, 0, 0 #> $ Chri_133.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_135.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_141.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_18.1                    <dbl> 0, 0, 1, 0, 0, 0, 1, 1, 1 #> $ Chri_20.1                    <dbl> 1, 0, 1, 1, 1, 0, 0, 0, 0 #> $ Chri_21.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_25.1                    <dbl> 0, 0, 1, 1, 1, 0, 1, 0, 0 #> $ Chri_28.1                    <dbl> 1, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Chri_31.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_34.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_36.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Chri_37.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Chri_4.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Chri_40.1                    <dbl> 0, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Chri_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Chri_45.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Chri_53.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Chri_65.1                    <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Chri_71.1                    <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Chri_86.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_9.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Chri_92.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_98.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_Christensenellaceae.1   <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Clos_Christensenellaceae.2   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.2        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 1 #> $ Clos_15.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_21.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_22.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_31.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Clos_33.1                    <dbl> 1, 0, 0, 0, 1, 1, 0, 1, 1 #> $ Clos_35.1                    <dbl> 1, 0, 1, 0, 1, 1, 0, 1, 1 #> $ Clos_37.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1 #> $ Clos_41.1                    <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 1 #> $ Clos_42.1                    <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Clos_43.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_44.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_48.1                    <dbl> 0, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Clos_49.1                    <dbl> 1, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_50.1                    <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_51.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_52.1                    <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Clos_53.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_56.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Clos_58.1                    <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 1 #> $ Clos_70.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_72.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_73.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_10.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Clos_16.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_22.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 1 #> $ Clos_23.1                    <dbl> 1, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_24.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_26.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_32.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_37.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_41.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_42.1.1                  <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Clos_44.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0 #> $ Clos_46.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_49.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_5.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_56.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_57.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_58.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_62.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_63.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.1        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_2.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_3.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.1.1      <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.2.1      <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_101.1.1                 <dbl> 0, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Clos_104.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_105.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_108.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_109.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_110.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_111.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_118.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_119.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_12.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_120.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_122.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_124.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_126.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_127.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_128.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_129.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_132.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_14.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_141.1.1                 <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_150.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_151.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_152.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_155.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_156.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_157.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_158.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_159.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_162.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_164.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_173.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_176.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_181.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_182.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_188.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_190.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_195.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_197.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_198.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_199.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_2.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_200.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_205.1.1                 <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_207.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ Clos_208.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_209.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_210.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_213.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_215.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_22.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_225.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_227.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_228.1.1                 <dbl> 1, 1, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_230.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_232.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_233.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_241.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_243.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_249.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_254.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 1, 1, 0 #> $ Clos_256.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_265.1.1                 <dbl> 1, 0, 0, 1, 1, 1, 1, 1, 0 #> $ Clos_267.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Clos_268.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_271.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_276.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_277.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_278.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_279.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_285.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_286.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Clos_288.1.1                 <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Clos_290.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_292.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Clos_293.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_297.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_30.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_300.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_302.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_308.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_309.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_31.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_311.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_312.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_313.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_315.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_321.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_328.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_33.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_331.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_333.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_337.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_339.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_342.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_349.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_350.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_352.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Clos_353.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_356.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_359.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Clos_361.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_362.1.1                 <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_365.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_367.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_38.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_384.1.1                 <dbl> 1, 0, 1, 0, 1, 1, 1, 1, 0 #> $ Clos_386.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_387.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Clos_388.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_389.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Clos_39.1.1                  <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_391.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Clos_392.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_394.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_395.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_396.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_397.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_398.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_399.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_401.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_402.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_406.1.1                 <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Clos_407.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_408.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_410.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_412.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_414.1.1                 <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_415.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_420.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_422.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_427.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_44.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Clos_440.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_441.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_444.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_447.1.1                 <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_449.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_45.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_454.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_455.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_456.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_465.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_466.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Clos_476.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_477.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_478.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_48.1.1                  <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_482.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_483.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_485.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_487.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_49.1.1                  <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Clos_491.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_495.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_499.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_50.1.1                  <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0 #> $ Clos_502.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_503.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_510.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_514.1.1                 <dbl> 1, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_515.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_517.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_523.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_524.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_525.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_527.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_528.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_535.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_538.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_543.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_544.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_545.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_547.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_549.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_550.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_551.1.1                 <dbl> 0, 0, 0, 1, 1, 1, 1, 1, 0 #> $ Clos_56.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_564.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_565.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_572.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_574.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_575.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_576.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_579.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_58.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_580.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_581.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_584.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_585.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_588.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_59.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_590.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_593.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Clos_595.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_599.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_60.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_600.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 0 #> $ Clos_603.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1 #> $ Clos_609.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_61.1.1                  <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0 #> $ Clos_610.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_611.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_619.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_620.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_621.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_625.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_626.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_627.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_629.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_634.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_638.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_644.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_648.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_651.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_654.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_657.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_659.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_663.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_664.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 1 #> $ Clos_674.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_675.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_676.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_677.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_681.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_685.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_691.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_692.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_693.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_696.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_698.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_7.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_70.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_700.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_703.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_707.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_709.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_71.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_711.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_716.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_717.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_719.1.1                 <dbl> 1, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Clos_720.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_721.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_726.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_730.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_734.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_736.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_737.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_745.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_748.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_760.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_761.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_763.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_766.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_767.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_77.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_770.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_771.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_783.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_785.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_79.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_790.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_791.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_794.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_795.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_797.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_798.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_80.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_806.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_815.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_818.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_825.1.1                 <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_826.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 1, 0, 0 #> $ Clos_828.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_832.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_834.1.1                 <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_835.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_838.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_84.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_841.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_846.1.1                 <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Clos_848.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_849.1.1                 <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_852.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_853.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_854.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_855.1.1                 <dbl> 1, 0, 1, 1, 0, 1, 1, 1, 0 #> $ Clos_856.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_859.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_863.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_865.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_866.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_870.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_872.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_873.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_875.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_879.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_882.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_883.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_885.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_98.1.1                  <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Clos_Clostridiales.1.1       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Clostridiales.2.1       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Coma_4.1                     <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Burk_Comamonadaceae.2        <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Cori_10.1                    <dbl> 0, 1, 1, 0, 0, 0, 1, 0, 0 #> $ Cori_3.1                     <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 0 #> $ Cori_4.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Cori_5.1                     <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Cori_7.1                     <dbl> 0, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Cori_3.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Cori_5.1.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Cori_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Cori_9.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Cori_2.1                     <dbl> 1, 0, 1, 1, 1, 0, 1, 1, 1 #> $ Cori_3.1.2                   <dbl> 0, 0, 1, 1, 1, 0, 1, 1, 0 #> $ Defe_Deferribacteraceae.2    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Deha_2.1                     <dbl> 1, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Deha_6.1                     <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Deha_7.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_Dehalobacteriaceae.2    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Deha_10.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Deha_16.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_19.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Deha_22.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Deha_26.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_35.1                    <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Deha_37.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_38.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Deha_45.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Deha_7.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Deha_8.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Deha_9.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Dehalobacteriaceae.1    <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Clos_Dehalobacteriaceae.2.1  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Acti_Dermabacteraceae.1      <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Desu_Desulfovibrionaceae.1   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1 #> $ Desu_Desulfovibrionaceae.2   <dbl> 1, 0, 0, 1, 1, 1, 1, 0, 1 #> $ Desu_Desulfovibrionaceae.1.1 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Ente_24.1                    <dbl> 1, 0, 0, 1, 1, 1, 1, 1, 1 #> $ Ente_3.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_Enterococcaceae.1       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_Enterococcaceae.2       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_Enterococcaceae.2.1     <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 1 #> $ Erys_Erysipelotrichaceae.1   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_Erysipelotrichaceae.1.1 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_15.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_18.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_2.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Erys_11.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_13.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Erys_14.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_18.1.1                  <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Erys_21.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Erys_22.1                    <dbl> 1, 0, 1, 0, 1, 1, 1, 0, 0 #> $ Erys_23.1                    <dbl> 1, 0, 0, 0, 1, 1, 1, 0, 0 #> $ Erys_28.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 1 #> $ Erys_29.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_30.1                    <dbl> 0, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Erys_33.1                    <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 1 #> $ Erys_34.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Erys_37.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Erys_38.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Erys_39.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Erys_40.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Erys_43.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Erys_49.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Erys_5.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_51.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Erys_52.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_53.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_54.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Erys_6.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_7.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_Erysipelotrichaceae.1.2 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_2.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 1 #> $ Erys_2.1.2                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_Erysipelotrichaceae.1.3 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Euba_5.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Flav_3.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ JG30_JG30.KF.CM45.2.1        <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_12.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_14.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_15.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_16.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_3.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Lachnospiraceae.1       <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_Lachnospiraceae.2       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_2.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.1.1     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.1     <dbl> 0, 0, 0, 0, 1, 0, 1, 1, 0 #> $ Lach_5.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_10.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_13.1                    <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Lach_2.1.1                   <dbl> 1, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Lach_3.1.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_6.1                     <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.2     <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_2.1.2                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_Lachnospiraceae.1.2     <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Lach_104.1                   <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Lach_105.1                   <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Lach_110.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_12.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_122.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Lach_124.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Lach_125.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_126.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_127.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Lach_128.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Lach_134.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_136.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_14.1.1                  <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_140.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_141.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_142.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_144.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_151.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_154.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_156.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Lach_157.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_158.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_159.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_161.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_162.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_164.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_165.1                   <dbl> 1, 0, 0, 0, 0, 1, 1, 1, 0 #> $ Lach_166.1                   <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Lach_167.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_169.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_177.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_180.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Lach_182.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_184.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_185.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Lach_187.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_188.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_189.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_190.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Lach_198.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_199.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_20.1                    <dbl> 1, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Lach_200.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ Lach_202.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_203.1                   <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Lach_204.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_206.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_210.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_211.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_214.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_218.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_22.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_220.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_221.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_222.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_224.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_227.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_23.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_237.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_239.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_248.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_25.1                    <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Lach_26.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_35.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_37.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_40.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_41.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_43.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_44.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_45.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_46.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Lach_49.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Lach_53.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_54.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_55.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_57.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_59.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_61.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_64.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_67.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_68.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_71.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Lach_74.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_8.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ Lach_89.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_90.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Lach_91.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_94.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_95.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_Lachnospiraceae.2.3     <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_16.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_18.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_22.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_25.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_26.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_30.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_35.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Lach_40.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_41.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_44.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_45.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Lach_48.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_53.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_55.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_56.1                    <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Lach_58.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_59.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_61.1.1                  <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Lach_64.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_66.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_67.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_68.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_69.1                    <dbl> 1, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_73.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 1 #> $ Clos_Lachnospiraceae.1.3     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_11.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_13.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_14.1.2                  <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Lach_15.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_18.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_19.1                    <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Lach_4.1                     <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Lach_5.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_6.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_8.1.1                   <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Lach_21.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_22.1.2                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_4.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Lach_7.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_Lachnospiraceae.1.4     <dbl> 1, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.4     <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Lach_3.1.2                   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Lach_5.1.2                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.1.5     <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.5     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lact_12.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lact_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_3.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lact_4.1                     <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Lact_5.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lact_7.1                     <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Meth_Methanobacteriaceae.1   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0 #> $ Rhiz_Methylobacteriaceae.1   <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Acti_Microbacteriaceae.1     <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Micr_2.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Acti_Micrococcaceae.2        <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Acti_Micrococcaceae.1        <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ ML61_10.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ ML61_12.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ ML61_2.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ ML61_9.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Burk_Oxalobacteraceae.1      <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Pept_3.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Pept_2.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Pept_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Pept_2.1                     <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Pept_4.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Pept_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Peptostreptococcaceae.1 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Pire_3.1                     <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Bact_Porphyromonadaceae.1    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Porp_2.1                     <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0 #> $ Bact_Porphyromonadaceae.2    <dbl> 0, 0, 0, 1, 1, 1, 1, 1, 0 #> $ Porp_2.1.1                   <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Porp_4.1                     <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Bact_Porphyromonadaceae.1.1  <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Bact_Porphyromonadaceae.2.1  <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ RF32_12.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF32_2.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF32_5.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF32_RF32.2.1                <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_101.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ RF39_105.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_11.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_115.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_117.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_120.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_121.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_123.1.1                 <dbl> 1, 1, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_127.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ RF39_128.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_135.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_137.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_138.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_143.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_147.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_148.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_15.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_150.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_152.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_164.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_166.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ RF39_169.1.1                 <dbl> 0, 1, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_170.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_171.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_172.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_180.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_182.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_187.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_189.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ RF39_190.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_191.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_193.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_195.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_196.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ RF39_198.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_205.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_207.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_212.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ RF39_213.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_214.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_221.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_222.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_224.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_226.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_228.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_229.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_23.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_230.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_246.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_27.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_29.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_30.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 1, 0, 0 #> $ RF39_31.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_33.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_35.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_38.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ RF39_43.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_44.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ RF39_46.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_48.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_49.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_50.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_51.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_54.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_56.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_59.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_61.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_62.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 0 #> $ RF39_63.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_64.1.1                  <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0 #> $ RF39_65.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_67.1.1                  <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_7.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_70.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_71.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_75.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_76.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_77.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_79.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ RF39_8.1.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_81.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_89.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_99.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_RF39.1.1                <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ WCHB_RFP12.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rhod_Rhodobacteraceae.2      <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rike_10.1                    <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rike_14.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rike_15.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rike_17.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rike_18.1                    <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 1 #> $ Rike_2.1                     <dbl> 1, 0, 0, 1, 0, 0, 1, 1, 1 #> $ Rike_20.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rike_3.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rike_6.1                     <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rike_7.1                     <dbl> 0, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Rike_9.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_4.1                     <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_5.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_100.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1000.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_1002.1                  <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_1003.1                  <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_1004.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_101.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1010.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_1011.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_1015.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ Rumi_102.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_1023.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_1027.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_1028.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1029.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_103.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_1033.1                  <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_1034.1                  <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Rumi_1035.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_1036.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1039.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_1040.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1041.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_1042.1                  <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Rumi_1046.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_1047.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_1054.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1056.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_1057.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1060.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1062.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1063.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_107.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_108.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_110.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_111.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_112.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_114.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_116.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_122.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_127.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_128.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_131.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_139.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_147.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_148.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_15.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_155.1                   <dbl> 1, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_156.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_161.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_17.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_176.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_18.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_182.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_185.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_186.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_189.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_19.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_190.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_191.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_196.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_197.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_198.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_20.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_200.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_201.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_204.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_206.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Rumi_213.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_217.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_219.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_223.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_225.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_226.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_227.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_228.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_23.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_232.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_235.1                   <dbl> 0, 0, 1, 1, 1, 0, 1, 1, 0 #> $ Rumi_237.1                   <dbl> 0, 0, 0, 1, 0, 0, 1, 1, 1 #> $ Rumi_239.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_245.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_246.1                   <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Rumi_25.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_251.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_254.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_255.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_26.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_261.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_262.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_264.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_268.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_269.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_272.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Rumi_276.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_277.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_278.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_279.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_286.1                   <dbl> 1, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Rumi_292.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Rumi_293.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_294.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_3.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_304.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_307.1                   <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Rumi_309.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_311.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_313.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_314.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_317.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_320.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_323.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_328.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_329.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_330.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_332.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_339.1                   <dbl> 1, 1, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_34.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_343.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_344.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_345.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_348.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_350.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_352.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_356.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_357.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_359.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_361.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_362.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_363.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_372.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_373.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_374.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_375.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_377.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_378.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_38.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_380.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_381.1                   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_382.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 1 #> $ Rumi_384.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_385.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_389.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_390.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_391.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_393.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_397.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_4.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_40.1                    <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Rumi_400.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_401.1                   <dbl> 1, 0, 1, 1, 1, 0, 1, 0, 0 #> $ Rumi_402.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_403.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_408.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_410.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Rumi_411.1                   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_417.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Rumi_420.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_423.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_424.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Rumi_426.1                   <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Rumi_430.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_431.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_433.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_439.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_440.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_441.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_442.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_443.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_445.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_446.1                   <dbl> 1, 0, 1, 1, 1, 0, 1, 1, 0 #> $ Rumi_45.1                    <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Rumi_451.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_452.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_454.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_457.1                   <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Rumi_466.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_47.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_470.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_471.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_477.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 1, 0 #> $ Rumi_480.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_481.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_482.1                   <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Rumi_483.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_484.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_485.1                   <dbl> 0, 0, 1, 0, 0, 1, 1, 1, 0 #> $ Rumi_486.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_487.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_488.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_489.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_490.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_492.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_496.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_5.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_50.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_500.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_503.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_504.1                   <dbl> 1, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_505.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_508.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_514.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Rumi_538.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_54.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_545.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_548.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_551.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_552.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_558.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_559.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_56.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_560.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_562.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_567.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_568.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_57.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_574.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_577.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_578.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_579.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_581.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_587.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_589.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_59.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_591.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_592.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_595.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_596.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_598.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_599.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_606.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_608.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_614.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_615.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_616.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_617.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_619.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_625.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_628.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_63.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_631.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_632.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_638.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_639.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_642.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_647.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_648.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_65.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_651.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_652.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_654.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 1 #> $ Rumi_657.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_659.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_660.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_666.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_672.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_674.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_676.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_68.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_680.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_682.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 1 #> $ Rumi_684.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_686.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_687.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_69.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_692.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_693.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_695.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_70.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_700.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_704.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_708.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_71.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_713.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_714.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_717.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_718.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_72.1                    <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_720.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_721.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_722.1                   <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0 #> $ Rumi_725.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 1, 0 #> $ Rumi_727.1                   <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Rumi_732.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_74.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_740.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_743.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_747.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_75.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_757.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_758.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_760.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_761.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_762.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Rumi_763.1                   <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_766.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_767.1                   <dbl> 1, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Rumi_768.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_77.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_774.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_779.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_78.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_781.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_789.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_79.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_790.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_793.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Rumi_799.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_802.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Rumi_803.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_804.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_806.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_81.1                    <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_812.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_813.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_814.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_815.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_818.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_823.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_824.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 1, 1 #> $ Rumi_826.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_83.1                    <dbl> 0, 0, 0, 1, 1, 0, 1, 1, 1 #> $ Rumi_830.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_832.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_839.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_84.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_843.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_844.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_845.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_847.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_849.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_86.1                    <dbl> 0, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Rumi_865.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_866.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_867.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_872.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_874.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_875.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_879.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_881.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_89.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_891.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_892.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_898.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_899.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_900.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_904.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_909.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_91.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_910.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_914.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_919.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_921.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_924.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_926.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_928.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_929.1                   <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Rumi_932.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_934.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_937.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_947.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_948.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_953.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_954.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_957.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_958.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_961.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_964.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_965.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_966.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_967.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_97.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_971.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_972.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_973.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_974.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_975.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_976.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_980.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_985.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_986.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_989.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_992.1                   <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ Rumi_996.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_999.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_Ruminococcaceae.1       <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_Ruminococcaceae.2       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Ruminococcaceae.1.1     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_10.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_100.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_103.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_105.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_106.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_111.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_116.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_12.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_125.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_13.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_141.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_144.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_145.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_15.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_151.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_158.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_16.1                    <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_161.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_162.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_163.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_164.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_165.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_167.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_168.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_17.1.1                  <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Rumi_170.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_18.1.1                  <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Rumi_19.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_2.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_26.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_27.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_3.1.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_34.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_35.1                    <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Rumi_38.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_39.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_45.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_46.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_47.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_49.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_5.1.2                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_50.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_54.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_55.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_62.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_66.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_72.1.1                  <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Rumi_73.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_74.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_77.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_8.1                     <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Rumi_80.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_83.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_85.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_9.1                     <dbl> 1, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Rumi_91.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_Ruminococcaceae.1.2     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_10.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_102.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Rumi_106.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_107.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_108.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_109.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_110.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_115.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_12.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_125.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_136.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_137.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_138.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_139.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_143.1                   <dbl> 0, 0, 1, 1, 0, 1, 1, 0, 0 #> $ Rumi_144.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0 #> $ Rumi_146.1                   <dbl> 1, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Rumi_149.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_150.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_153.1                   <dbl> 0, 0, 1, 1, 0, 0, 1, 0, 1 #> $ Rumi_154.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_155.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_156.1.1                 <dbl> 0, 0, 1, 1, 1, 1, 1, 0, 0 #> $ Rumi_16.1.1                  <dbl> 0, 0, 0, 1, 1, 1, 1, 0, 1 #> $ Rumi_19.1.2                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_2.1.2                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_22.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_25.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_26.1.2                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_28.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_29.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_3.1.2                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_30.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_34.1.2                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_35.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_37.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_38.1.2                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_4.1.2                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_43.1                    <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 1 #> $ Rumi_46.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_49.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_53.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_55.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_56.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_62.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_64.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_65.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_69.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_71.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_74.1.2                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_75.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_78.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_8.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_84.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_87.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_89.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_90.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_91.1.2                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_92.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_94.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_95.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_10.1.2                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_13.1.1                  <dbl> 0, 1, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_16.1.2                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_18.1.2                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_19.1.3                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_2.1.3                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_6.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_8.1.2                   <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_Ruminococcaceae.2.1     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._10.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ S24._12.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ S24._16.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ S24._17.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ S24._2.1                     <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ S24._21.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._22.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._23.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._30.1                    <dbl> 1, 0, 1, 1, 0, 1, 0, 0, 0 #> $ S24._32.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ S24._33.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ S24._35.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ S24._36.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ S24._38.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ S24._39.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._41.1                    <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ S24._42.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ S24._47.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._48.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._49.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._50.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._51.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ S24._53.1                    <dbl> 0, 0, 1, 1, 0, 1, 1, 0, 1 #> $ S24._55.1                    <dbl> 1, 1, 1, 0, 0, 0, 0, 1, 0 #> $ S24._7.1                     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ S24._8.1                     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Syne_Synergistaceae.1        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Turi_5.1                     <dbl> 1, 1, 1, 0, 1, 1, 1, 1, 0 #> $ Turi_6.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Turi_Turicibacteraceae.1     <dbl> 1, 1, 1, 0, 1, 1, 0, 1, 0 #> $ Turi_Turicibacteraceae.2     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Veil_2.1                     <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Veil_3.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_Veillonellaceae.1       <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Verr_2.1                     <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Verr_3.1                     <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 1 #> $ Verr_4.1                     <dbl> 1, 0, 0, 1, 0, 0, 1, 0, 1 #> $ Verr_5.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Verr_8.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Verr_Verrucomicrobiaceae.2   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Verr_2.1.1                   <dbl> 0, 0, 0, 0, 1, 1, 1, 0, 0 #> $ Verr_4.1.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Verr_Verrucomicrobiaceae.2.1 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Vibr_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Vict_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Xant_Xanthomonadaceae.1      <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_11.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_13.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ YS2_18.1.1                   <dbl> 0, 0, 1, 0, 0, 1, 1, 0, 0 #> $ YS2_21.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_23.1.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ YS2_24.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_27.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_3.1.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ YS2_33.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_35.1.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ YS2_37.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Regression.html","id":"lets-load-that-data","dir":"Articles","previous_headings":"","what":"Lets load that data","title":"Regression","text":"###Parallel processing MrIML provides uses flexible future apply functionality set multi-core processing. example , set cluster using 4 cores. don’t set cluster, default settings used analysis run sequentially.","code":"plan(multisession, workers = 2)"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Regression.html","id":"running-the-analyis","dir":"Articles","previous_headings":"","what":"Running the analyis","title":"Regression","text":"Performing analysis similar classification example. Lets start constructing linear model data set. set Model 1 linear regression. See https://www.tidymodels.org/find/ regression model options Note ‘mode’ must regression MrIMLpredicts, model set ‘regression’. Model performance can examined way classification example, however metrics different. provide root mean square error (rmse) R2. can see overall R2 0.13 substantial variation across loci predictive performance. Lets compare performance linear models random forests. Random forests computational engine gradient forests. Notice random forests two hyperparameters tune; mtry (number features randomly include split) min_n (minimum number data points node required node split ). syntax ‘tune()’ acts placeholder tell MrIML tune hyperparamters across grid values (defined MRIML predicts ‘tune_grid_size’ argument). Different algorithms different hyperparameters.See https://www.tidymodels.org/find/parsnip/ parameter details. Note large grid sizes (>10) algorithms lots hyperparameters (extreme gradient boosting) computationally demanding. case choose grid size 5.  ## Plotting can see predictive performance actually slightly less using random forests (overall R2 = 0.12) loci random forests better linear models sometimes worse. choose? Generally simpler models preferred (linear model case) depends important think non-linear response . future versions MrIML implement ensemble models overcome issue. time-look variable importance random forest based model.  Cutoff reduces number individual SNP plots presented second plot ‘plot.pca=’yes’’ enables variable importance scores analysed using principal component analysis (PCA) SNPs closer PCA space shaped similar combinations features. can see bio_18 (summer precipitation), bio_1 (mean annual temperature) bio_10 (mean summer temperature) important features overall. Summer precipitation important Fitzpatrick et al otherwise results similar. second plot shows individual models (r2 > 0.1, data need play around threshold) can see SNPs bio_1 important whereas another MEM.1 prominent.PCA shows candidate 5119, 9287, 5033 108 shaped similarly features included may, example, product linked selection. Note can also calculate bootstraps importance scores (partial dependencies), functionality still development regression models. Now can explore model plotting relationships SNPs feature set. Lets choose bio_1 (mean annual temperature) plot individual global (average SNPs) partial dependency (PD) plots. first plot partial dependency SNPs respond mean annual temperature. mean respond prediction surface (line) deviates across Y axis PD plots. measure deviation calculating standard deviation use threshold (‘sd thresh=0.01’ case differ data set) ease visualization relationships. second plot smoothed average partial dependency SNPs across annual temperature gradient. similar pattern observed Fitzpatrick et al except slight decline SNP turnover mean annual temperatures > 0. Combined,can see candidate SNPs driving pattern may warrant interrogation. Lets compare PDs accumulated local effect plots less sensitive correlations among features (see Molnar 2019). effect mean annual temperature SNP turnover distinct global ALE plot. may mean correlations features may important predictions. MrIML easy use functionality can can quantify interactions features. Note can take compute topic future work. touching surface possible terms interrogating model. Flashlight IML packages wide variety tools can offer novel insights models perform. See https://cran.r-project.org/web/packages/flashlight/vignettes/flashlight.html https://cran.r-project.org/web/packages/iml/vignettes/intro.html options.","code":"model_lm <- #model used to generate yhat   # specify that the model is a random forest   linear_reg() %>%   # select the engine/package that underlies the model   set_engine(\"lm\") %>%   # choose either the continuous regression or binary classification mode   set_mode(\"regression\")  yhats_lm <- mrIMLpredicts(X=X,                           Y=Y,                           X1=NULL,                           Model=model_lm,                           prop=0.7,                           tune_grid_size= 10,                           k=10,                           racing=F) ## Balanced data= up updamples and down downsampled to create a balanced set. For regression 'no' has to be selected. #racing can't be used for linear models - no parameters to tune ModelPerf_lm <- mrIMLperformance(yhats_lm) ModelPerf_lm[[1]] #predictive performance for individual responses.  #> # A tibble: 20 × 4 #>    response           model_name   rmse rsquared #>    <chr>              <chr>       <dbl>    <dbl> #>  1 CANDIDATE_GI5_108  linear_reg 0.0307 0.187    #>  2 CANDIDATE_GI5_198  linear_reg 0.133  0.331    #>  3 CANDIDATE_GI5_268  linear_reg 0.0907 0.354    #>  4 CANDIDATE_GI5_92   linear_reg 0.138  0.273    #>  5 CANDIDATE_GI5_1950 linear_reg 0.193  0.307    #>  6 CANDIDATE_GI5_2382 linear_reg 0.105  0.0236   #>  7 CANDIDATE_GI5_2405 linear_reg 0.133  0.431    #>  8 CANDIDATE_GI5_2612 linear_reg 0.181  0.726    #>  9 CANDIDATE_GI5_2641 linear_reg 0.0798 0.0460   #> 10 CANDIDATE_GI5_33   linear_reg 0.155  0.409    #> 11 CANDIDATE_GI5_3966 linear_reg 0.195  0.000540 #> 12 CANDIDATE_GI5_5033 linear_reg 0.0730 0.00208  #> 13 CANDIDATE_GI5_5090 linear_reg 0.167  0.415    #> 14 CANDIDATE_GI5_5119 linear_reg 0.0567 0.121    #> 15 CANDIDATE_GI5_8997 linear_reg 0.114  0.566    #> 16 CANDIDATE_GI5_9287 linear_reg 0.0580 0.00256  #> 17 CANDIDATE_GI5_9447 linear_reg 0.0970 0.429    #> 18 CANDIDATE_GI5_9551 linear_reg 0.164  0.680    #> 19 CANDIDATE_GI5_9585 linear_reg 0.142  0.254    #> 20 CANDIDATE_GI5_9659 linear_reg 0.153  0.000684 ModelPerf_lm[[2]]#overall average r2  #> [1] 0.1228556 model_rf <- rand_forest(trees = 100,               mode = \"regression\",               mtry = tune(),               min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000          set_engine(\"randomForest\")  yhats_rf <- mrIMLpredicts(X=X,                           Y=Y,                           Model=model_rf,                           tune_grid_size=5) #>   |                                                                              |                                                                      |   0%  |                                                                              |====                                                                  |   5%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100%  ModelPerf_rf <- mrIMLperformance(yhats_rf)  ModelPerf_rf[[1]] #predictive performance for individual responses.  #> # A tibble: 20 × 4 #>    response           model_name    rmse rsquared #>    <chr>              <chr>        <dbl>    <dbl> #>  1 CANDIDATE_GI5_108  rand_forest 0.0248  0.0720  #>  2 CANDIDATE_GI5_198  rand_forest 0.144   0.366   #>  3 CANDIDATE_GI5_268  rand_forest 0.0838  0.0839  #>  4 CANDIDATE_GI5_92   rand_forest 0.0502  0.451   #>  5 CANDIDATE_GI5_1950 rand_forest 0.190   0.437   #>  6 CANDIDATE_GI5_2382 rand_forest 0.0689  0.317   #>  7 CANDIDATE_GI5_2405 rand_forest 0.172   0.308   #>  8 CANDIDATE_GI5_2612 rand_forest 0.142   0.260   #>  9 CANDIDATE_GI5_2641 rand_forest 0.0773  0.00712 #> 10 CANDIDATE_GI5_33   rand_forest 0.131   0.0140  #> 11 CANDIDATE_GI5_3966 rand_forest 0.150   0.0493  #> 12 CANDIDATE_GI5_5033 rand_forest 0.0290  0.0102  #> 13 CANDIDATE_GI5_5090 rand_forest 0.152   0.733   #> 14 CANDIDATE_GI5_5119 rand_forest 0.114   0.151   #> 15 CANDIDATE_GI5_8997 rand_forest 0.105   0.657   #> 16 CANDIDATE_GI5_9287 rand_forest 0.0390  0.0660  #> 17 CANDIDATE_GI5_9447 rand_forest 0.0806  0.0805  #> 18 CANDIDATE_GI5_9551 rand_forest 0.113   0.123   #> 19 CANDIDATE_GI5_9585 rand_forest 0.138   0.340   #> 20 CANDIDATE_GI5_9659 rand_forest 0.118   0.295 ModelPerf_rf[[2]]#overall average r2  #> [1] 0.1061354  #easier to see with plots plots <- mrPerformancePlot(ModelPerf1=ModelPerf_lm,                            ModelPerf2 = ModelPerf_rf,                            mode='regression' )   plots[[1]] plots[[2]] VI <- mrVip(yhats_rf,             mrBootstrap_obj = NULL,             threshold = 0.1,             global_top_var = 10,             local_top_var = 5,             taxa='CANDIDATE_GI5_9585')   VI[[3]] #Importance plot VI_PCA <- VI %>%   mrVipPCA() VI_PCA[[1]] PD_bio1 <- mrCovar(yhats_rf,         var = \"bio_1\",         sdthresh = 0.01) PD_bio1[[1]] PD_bio_1_ale <- mrCovar(yhats_rf,         var = \"bio_1\",         sdthresh = 0.01,         type = \"ale\")  PD_bio_1_ale[[1]]"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Swine biosecurity.html","id":"lets-load-that-data","dir":"Articles","previous_headings":"","what":"Lets load that data","title":"Swine biosecurity","text":"synthesized dataset simulate PRRSV infection, biosecurity practices farm demographics swine farms across united states. Please note data included package simulated, reflection real farm, company state.","code":"set.seed(130) #set the seed to ensure consistency load(\"biosecurity_data.RData\") data <- biosecurity_vignette_data"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Swine biosecurity.html","id":"defining-your-model-engine","dir":"Articles","previous_headings":"","what":"Defining your model engine","title":"Swine biosecurity","text":"random forest model, used classification example. However models available within MrIML can found .","code":"#split predictor variables and outcome Y <- data %>%   select(Class) X <- data %>%   select(-c(1, 44, 45)) model1 <- rand_forest(trees = 1000,               mtry = tune(),               min_n = tune(),               mode = \"classification\") %>%    set_engine(\"randomForest\")"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Swine biosecurity.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"Swine biosecurity","text":"MrIML provides uses flexible future apply functionality set multi-core processing. example , set cluster using 4 cores. don’t set cluster, default settings used analysis run sequentially.","code":"future::plan(\"multisession\", workers = 2)"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Swine biosecurity.html","id":"running-the-analysis","dir":"Articles","previous_headings":"","what":"Running the analysis","title":"Swine biosecurity","text":"Now can train test model. can assess model performance using number performance metrics including area curve (AUC), sensitivity, specificity Matthews correlation coefficient (MCC).","code":"yhats <- mrIMLpredicts(X=X, #features/predictors                         Y=Y, #response data                        Model=model1, #specify your model                        racing=T) #turn off racing autotuning for now #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% ModelPerf <- mrIMLperformance(yhats)  ModelPerf[[1]] #predictive performance for individual responses  #> # A tibble: 1 × 8 #>   response model_name  roc_AUC    mcc sensitivity   ppv specificity prevalence #>   <chr>    <chr>         <dbl>  <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Class    rand_forest   0.573 0.0292       0.581 0.529       0.448        0.5 ModelPerf[[2]]#overall predictive performance. r2 for regression and MCC for classification #> [1] 0.02916536"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Swine biosecurity.html","id":"benchmarking-global-importance","dir":"Articles","previous_headings":"","what":"Benchmarking: global importance","title":"Swine biosecurity","text":"can look variable importance. dependence outcome biosecurity variables. can explore assess partial dependence variable. isolate dependence one variable visualize dependence changes different observed values. ### Benchmarking: predicted risk following function allows visualize compare predicted risk among within groups","code":"#calculate variable importance #still got a bug here to do with the PCA impVI <- mrVip(   yhats,   threshold = 0.1,   global_top_var = 10,   local_top_var = 5,   taxa = NULL,   model_perf = ModelPerf )  impVI[[3]] #importance #create a flashlight object fl <- mrFlashlight(yhats,                    response=\"single\",                     index=1)  #plot partial dependence profiles plot(light_profile(fl, v = \"Premises_in_3_miles\")) +   theme_bw() #apply the trained model to the entire data set to provide risk of predicted outbreak fit_bio <- extract_workflow(yhats$Fits[[1]]$last_mod_fit)  pred_bio <- fit_bio %>%   predict(     new_data = yhats$Fits[[1]]$data,     type = \"prob\"   )  #... #plot within group comparison of predicted risk mrBenchmark(data = \"data1\",             Y = \"Class\",             pred = \"Predicted\",             group = \"Group\",             label_by = \"ID\",             type = \"internal\")"},{"path":"https://github.com/nickfountainjones/mrIML/articles/Swine biosecurity.html","id":"benchmarking-local-importance","dir":"Articles","previous_headings":"","what":"Benchmarking: local importance","title":"Swine biosecurity","text":"investigate interpret contribution variables individual level, must use local explanation method. implement local breakDown explainer. mrLocalExplainer produces aggregated individual results variable contribution. Variables phi > 0 contribute increase predicted PRRSV outbreak risk, variables phi < 0 contribute decrease predicted outbreak risk. Individual plots produced list object LE_indiv_plots. plot corresponds single farm. example positive farm negative farm shown . positive farm can see yards public road garbage collection contributing increased outbreak risk, manure removals repair visits contributing decreased outbreak risk. Likewise, negative farm yards public road downtime required manure removal personnel contributing increased outbreak risk, feed deliveries manure removals contributing decreased outbreak risk. session MrIML funded Critical Agricultural Research Extension 2019-68008-29910 USDA National Institute Food Agriculture.","code":"#Use this function to implement the local explainer  data<-data%>%   mutate(Class = revalue(Class,                 c(\"1\" = \"Positive\", \"0\" = \"Negative\")))  data$Class <- relevel(data$Class, \"Positive\") X1 <- X mrLocalExplainer(X = X1,                  Model = yhats,                  Y = data$Class) LE_indiv_plots[1] LE_indiv_plots[2]"},{"path":"https://github.com/nickfountainjones/mrIML/articles/mrIML.html","id":"fitting-a-mriml-model","dir":"Articles","previous_headings":"","what":"Fitting a mrIML model","title":"mrIML","text":"first step mrIML workflow define models like compare. Thanks tidymodels, can define wide range models using unified syntax. demonstrate, going set two models compare: random forest model (RF) logistic regression (lm). models can fit multi-response models using mrIMLpredicts(), work horse mrIML package. mrIMLpredicts() fits supplied tidymodel response variables. X1 argument can used supply response variables like also use predictors; results co-ocurance model (case use response variables). resulting fitted mrIML model list object containing original tidymodel, data, fitted response models. remainder functions mrIML package aimed interrogating, explaining, comparing fitted mrIML models.","code":"model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000.   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  model_lm <- logistic_reg() %>%   set_engine(\"glm\") mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5,   racing = TRUE )  mrIML_lm <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_lm ,    balance_data = 'no',   prop = 0.6,   k = 5,   racing = FALSE )"},{"path":"https://github.com/nickfountainjones/mrIML/articles/mrIML.html","id":"model-performance-and-comparison","dir":"Articles","previous_headings":"","what":"Model performance and comparison","title":"mrIML","text":"mrIMLperformance() another core function mrIML used extract performance metrics fitted response models inside multi-response mrIML model. performance metrics can compared different mrIML model using mrPerformancePlot() function.","code":"perf_rf <- mrIML_rf %>%   mrIMLperformance() perf_rf$model_performance #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.951 0.714       0.941 0.923       0.758     0.265  #> 2 Hkillangoi   rand_fore…   0.790 0.218       0.918 0.926       0.308     0.116  #> 3 Plas         rand_fore…   0.902 0.438       0.955 0.875       0.4       0.196  #> 4 Microfilaria rand_fore…   0.905 0           1     0.896       0         0.0980  perf_lm <- mrIML_lm %>%   mrIMLperformance() perf_rf$model_performance #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.951 0.714       0.941 0.923       0.758     0.265  #> 2 Hkillangoi   rand_fore…   0.790 0.218       0.918 0.926       0.308     0.116  #> 3 Plas         rand_fore…   0.902 0.438       0.955 0.875       0.4       0.196  #> 4 Microfilaria rand_fore…   0.905 0           1     0.896       0         0.0980 perf_comp <- mrPerformancePlot(perf_rf, perf_lm) perf_comp$performance_plot + perf_comp$performance_diff_plot"},{"path":"https://github.com/nickfountainjones/mrIML/articles/mrIML.html","id":"interogating-models","dir":"Articles","previous_headings":"","what":"Interogating models","title":"mrIML","text":"explore effect predictors different response models, mrIML works closely flashlight package, particularly implementation flashlight::light_profile() generate partial dependency curves (PDs) model agnostic comparisons. mrFlashlight() function can used convert mrIML model flashlight object order apply flashlight functions.  mrCovar() wrapper around mrFlashlight() flashlight::light_profile() quickly compare effect predictive covariate across many response models.  Since PDs model agnostic can use kind predictive model. example can compare random forest model results directly linear model bellow. even compare Neural Net enough data fit !  variability response probability across PD curve can used rank variable importance response model. mrVip() compares variable importance across response models inside mrIML model.  many response models /predictive covariates, threshold, global_top_var, local_top_var arguments can used filter variable importance results plotted mrVip. taxa argument can also used plot desirable response model may fit filtering criteria. See ?mrVip() specifics arguments.","code":"fl_rf <- mrIML_rf %>%   mrFlashlight()  fl_rf$Microfilaria %>%   light_profile(data = data, v = \"scale.prop.zos\") %>%   plot() +   ggtitle(\"Effect of scale.prop.zos on Microfilaria\") +   theme_bw() PD_scale.prop.zos_rf <- mrIML_rf %>%   mrCovar(var = \"scale.prop.zos\", sdthresh = 0)  PD_scale.prop.zos_rf[[1]] /   PD_scale.prop.zos_rf[[2]] /   PD_scale.prop.zos_rf[[3]] +   plot_layout(axis = \"collect\") PD_scale.prop.zos_lm <- mrIML_lm %>%   mrCovar(var = \"scale.prop.zos\", sdthresh = 0)  PD_scale.prop.zos_lm[[1]] /   PD_scale.prop.zos_lm[[2]] /   PD_scale.prop.zos_lm[[3]] +   plot_layout(axis = \"collect\") vip_rf <- mrIML_rf %>%   mrVip()  vip_rf[[3]]"},{"path":"https://github.com/nickfountainjones/mrIML/articles/mrIML.html","id":"bootstrapping-for-uncertainty","dir":"Articles","previous_headings":"","what":"Bootstrapping for uncertainty","title":"mrIML","text":"quantify uncertainty mrIML model, function mrBootstrap() bootstraps PDs. output can passed mrPdPlotBootstrap() visualize PDs.  bootstrapping PDs, bootstrap information can supplied mrVip() include uncertainty bounds plots.","code":"mrIML_boot_rf <- mrIML_rf %>%   mrBootstrap() #>   |                                                                              |                                                                      |   0%  |                                                                              |==                                                                    |   2%  |                                                                              |====                                                                  |   5%  |                                                                              |=====                                                                 |   8%  |                                                                              |=======                                                               |  10%  |                                                                              |=========                                                             |  12%  |                                                                              |==========                                                            |  15%  |                                                                              |============                                                          |  18%  |                                                                              |==============                                                        |  20%  |                                                                              |================                                                      |  22%  |                                                                              |==================                                                    |  25%  |                                                                              |===================                                                   |  28%  |                                                                              |=====================                                                 |  30%  |                                                                              |=======================                                               |  32%  |                                                                              |========================                                              |  35%  |                                                                              |==========================                                            |  38%  |                                                                              |============================                                          |  40%  |                                                                              |==============================                                        |  42%  |                                                                              |================================                                      |  45%  |                                                                              |=================================                                     |  48%  |                                                                              |===================================                                   |  50%  |                                                                              |=====================================                                 |  52%  |                                                                              |======================================                                |  55%  |                                                                              |========================================                              |  58%  |                                                                              |==========================================                            |  60%  |                                                                              |============================================                          |  62%  |                                                                              |==============================================                        |  65%  |                                                                              |===============================================                       |  68%  |                                                                              |=================================================                     |  70%  |                                                                              |===================================================                   |  72%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================                |  78%  |                                                                              |========================================================              |  80%  |                                                                              |==========================================================            |  82%  |                                                                              |============================================================          |  85%  |                                                                              |=============================================================         |  88%  |                                                                              |===============================================================       |  90%  |                                                                              |=================================================================     |  92%  |                                                                              |==================================================================    |  95%  |                                                                              |====================================================================  |  98%  |                                                                              |======================================================================| 100%  mrPdPlotBootstrap(   mrIML_rf,   mrBootstrap_obj = mrIML_boot_rf,   target = \"Plas\",   global_top_var = 4 )[[2]] vip_boot_rf <- mrVip(   mrIMLobj = mrIML_rf,   mrBootstrap_obj = mrIML_boot_rf )  vip_boot_rf[[3]]"},{"path":"https://github.com/nickfountainjones/mrIML/articles/mrIML.html","id":"checking-for-interactions","dir":"Articles","previous_headings":"","what":"Checking for interactions","title":"mrIML","text":"Another helpful investigative tool mrInteraction(). function quickly identifies response models strong evidence interactions predictors, predictors interactive effects interactions strongest.","code":"interactions_rf <- mrIML_rf %>%   mrInteractions(feature = \"Plas\", num_bootstrap = 10)  interactions_rf[[1]] /   interactions_rf[[2]] /   interactions_rf[[3]]"},{"path":"https://github.com/nickfountainjones/mrIML/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick Fountain-Jones. Author, maintainer. Gustavo Machado. Author. Chris Kozakiewicz. Author. Nick Clark. Author.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fountain-Jones N, Machado G, Kozakiewicz C, Clark N (2025). mrIML: Multi Response Interpretable Machine Learning. R package version 2.0.0, https://github.com/nickfountainjones/mrIML.","code":"@Manual{,   title = {mrIML: Multi Response Interpretable Machine Learning},   author = {Nick Fountain-Jones and Gustavo Machado and Chris Kozakiewicz and Nick Clark},   year = {2025},   note = {R package version 2.0.0},   url = {https://github.com/nickfountainjones/mrIML}, }"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"mriml-multivariate-multi-response-interpretable-machine-learning-","dir":"","previous_headings":"","what":"Multi Response Interpretable Machine Learning","title":"Multi Response Interpretable Machine Learning","text":"package aims enable users build interpret multivariate machine learning models harnessing tidyverse (tidy model syntax particular). package builds ideas Gradient Forests Ellis et al 2012), ecological genomic approaches Fitzpatrick Keller, 2014 multi-response stacking algorithms [Xing et al 2019]. package can use multi-response machine learning problem, designed handle data common community ecology (site species data) ecological genomics (individual population SNP loci).","code":""},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multi Response Interpretable Machine Learning","text":"Install stable version package:","code":"#install.packages(\"devtools\") #devtools::install_github('nfj1380/mrIML') library(mrIML)"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Multi Response Interpretable Machine Learning","text":"mrIML designed used single function call used ad-hoc fashion via individual function calls. following section give overview simple use case. using function see function documentation. core functions regression classification : mrIMLpredicts, mrIMLperformance, mrvip, mrFlashlight, andmrProfileplots. also allow users get bootstrapped estimations partial dependencies variable importance using mrBootstrap. first step using package load follows.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"model-component","dir":"","previous_headings":"","what":"Model component","title":"Multi Response Interpretable Machine Learning","text":"Now data loaded ready go can formulate model using tidymodel syntax. case binary data (SNP presence/absence loci) data also counts continuous (set_model argument “regression” instead “classification”). user can specify model ‘tidymodel’ universe ‘model 1’ (see https://www.tidymodels.org/find/ details). However, done testing random forests (rf) glms (generalized linear models). specify random forest classification model model applied response.","code":"model_rf <-rand_forest(trees = 100,               mode = \"classification\",               mtry = tune(),               min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000              set_engine(\"randomForest\")"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"mrimlpredicts","dir":"","previous_headings":"Model component","what":"mrIMLpredicts","title":"Multi Response Interpretable Machine Learning","text":"function represents core functionality package includes results reporting, plotting optional saving. requires data frame X t( snp data example) Y represented covariates features. Load example data (cite) data mrIML.","code":"fData <- filterRareCommon (Responsedata,                            lower=0.4,                            higher=0.7)  data <- fData[1:20]"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"parallel-processing","dir":"","previous_headings":"","what":"Parallel processing","title":"Multi Response Interpretable Machine Learning","text":"MrIML provides uses flexible future apply functionality set multi-core processing. example , set cluster using 4 cores. don’t set cluster, default settings used analysis run sequentially.","code":"# detectCores() #check how many cores you have available. We suggest keeping one core free for internet browsing etc.  cl <- parallel::makeCluster(4)      plan(cluster,      workers=cl) Y <- fData #For simplicity when comparing #Define set the outcomes of interest str(Features)  #> 'data.frame':    20 obs. of  19 variables: #>  $ Grassland       : num  0.07 0.0677 0.1845 0.0981 0.1578 ... #>  $ Shrub.Scrub     : num  0.557 0.767 0.524 0.786 0.842 ... #>  $ Forest          : num  0.01072 0.030588 0.008615 0.000662 0.000616 ... #>  $ HighlyDev       : num  0 0 0.00225 0 0 ... #>  $ Urban           : num  0 0 0.00159 0 0 ... #>  $ Suburban        : num  0.00357 0.13268 0.01325 0.00119 0 ... #>  $ Exurban         : num  0.00622 0.03019 0 0.01906 0 ... #>  $ Altered         : num  0.441 0.182 0.114 0.12 0 ... #>  $ Distance        : num  1.321 0.492 3.231 5.629 4.739 ... #>  $ Latitude        : num  33.8 33.8 33.8 33.8 33.8 ... #>  $ Longitude       : num  -118 -118 -118 -118 -118 ... #>  $ Age             : int  3 0 3 2 3 3 2 3 3 3 ... #>  $ Sex             : int  1 1 1 1 0 0 0 1 1 1 ... #>  $ Relatedness.PCO1: num  -0.1194 -0.0389 -0.1618 -0.1811 -0.1564 ... #>  $ Relatedness.PCO2: num  -0.1947 -0.0525 -0.321 -0.0827 0.1 ... #>  $ Relatedness.PCO3: num  -0.191 -0.0874 0.0541 -0.0627 -0.0111 ... #>  $ Relatedness.PCO4: num  0.1117 0.2422 0.0974 0.2129 0.2259 ... #>  $ Relatedness.PCO5: num  0.06405 0.0706 0.03514 -0.00084 0.0894 ... #>  $ Relatedness.PCO6: num  -0.0432 0.0683 -0.0805 0.2247 -0.055 ... #Remove NAs from the feature/predictor data. FeaturesnoNA<-Features[complete.cases(Features), ] X <- FeaturesnoNA #For simplicity #For more efficient testing for interactions (more variables more interacting pairs) X <- FeaturesnoNA[c(1:3)] #Three features only   yhats_rf <- mrIMLpredicts(X=X,Y=Y, #specify which data to use                           Model=model_rf, #what model                           balance_data='no', #balance the data or not                            mode='classification', #classification or regression                           k=5,                           tune_grid_size=5, #tuning parameters                           seed = 123,                           racing=F)  #Set seed #>   |                                                                              |                                                                      |   0%  |                                                                              |==                                                                    |   3%  |                                                                              |=====                                                                 |   7%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  14%  |                                                                              |============                                                          |  17%  |                                                                              |==============                                                        |  21%  |                                                                              |=================                                                     |  24%  |                                                                              |===================                                                   |  28%  |                                                                              |======================                                                |  31%  |                                                                              |========================                                              |  34%  |                                                                              |===========================                                           |  38%  |                                                                              |=============================                                         |  41%  |                                                                              |===============================                                       |  45%  |                                                                              |==================================                                    |  48%  |                                                                              |====================================                                  |  52%  |                                                                              |=======================================                               |  55%  |                                                                              |=========================================                             |  59%  |                                                                              |===========================================                           |  62%  |                                                                              |==============================================                        |  66%  |                                                                              |================================================                      |  69%  |                                                                              |===================================================                   |  72%  |                                                                              |=====================================================                 |  76%  |                                                                              |========================================================              |  79%  |                                                                              |==========================================================            |  83%  |                                                                              |============================================================          |  86%  |                                                                              |===============================================================       |  90%  |                                                                              |=================================================================     |  93%  |                                                                              |====================================================================  |  97%  |                                                                              |======================================================================| 100%  ModelPerf <- mrIMLperformance(yhats=yhats_rf,                               Model=model_rf,                               Y=Y,                               mode='classification')  ModelPerf[[1]] #Predictive performance for individual responses  #>    response  model_name            roc_AUC                mcc       sensitivity #> 1   env_131 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 2   env_163 rand_forest  0.238095238095238 -0.327326835353989                 0 #> 3   env_164 rand_forest  0.895833333333333  0.534522483824849               0.5 #> 4   env_167 rand_forest  0.833333333333333               <NA>                 1 #> 5   env_169 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 6   env_212 rand_forest  0.444444444444444  0.272165526975909                 1 #> 7    env_23 rand_forest               0.48 -0.333333333333333                 0 #> 8    env_24 rand_forest               0.28               <NA>                 1 #> 9    env_41 rand_forest  0.208333333333333 -0.408248290463863 0.333333333333333 #> 10   env_47 rand_forest               0.86  0.816496580927726                 1 #> 11   env_59 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 12    env_8 rand_forest            0.78125               <NA>                 0 #> 13   env_84 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 14   env_85 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 15   env_86 rand_forest             0.4375               <NA>                 1 #> 16  pol_105 rand_forest  0.854166666666667  0.408248290463863 0.333333333333333 #> 17  pol_108 rand_forest  0.761904761904762  0.327326835353989 0.285714285714286 #> 18  pol_111 rand_forest  0.895833333333333  0.534522483824849               0.5 #> 19  pol_117 rand_forest               0.78  0.654653670707977                 1 #> 20  pol_132 rand_forest               0.86  0.816496580927726                 1 #> 21  pol_159 rand_forest               0.28  0.333333333333333                 1 #> 22  pol_258 rand_forest 0.0833333333333333 -0.356348322549899               0.5 #> 23   pol_30 rand_forest               0.86  0.816496580927726                 1 #> 24  pol_340 rand_forest 0.0952380952380952 -0.218217890235992 0.142857142857143 #> 25  pol_353 rand_forest             0.4375               <NA>                 1 #> 26  pol_366 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 27   pol_87 rand_forest               0.86  0.816496580927726                 1 #> 28   pol_88 rand_forest               0.86  0.816496580927726                 1 #> 29   pol_89 rand_forest               0.86  0.816496580927726                 1 #>                  ppv       specificity        prevalence #> 1                  1                 1 0.421052631578947 #> 2  0.714285714285714                 0 0.631578947368421 #> 3                  1                 1 0.421052631578947 #> 4                  0               0.4 0.421052631578947 #> 5                  1                 1 0.421052631578947 #> 6  0.444444444444444 0.166666666666667  0.68421052631579 #> 7                0.8                 0 0.631578947368421 #> 8                  0               0.5 0.421052631578947 #> 9               0.25               0.4 0.473684210526316 #> 10               0.8 0.833333333333333 0.473684210526316 #> 11                 1                 1 0.421052631578947 #> 12                 1               NaN 0.473684210526316 #> 13                 1                 1 0.421052631578947 #> 14                 1                 1 0.421052631578947 #> 15                 0               0.4 0.421052631578947 #> 16                 1                 1 0.473684210526316 #> 17                 1                 1 0.421052631578947 #> 18                 1                 1 0.421052631578947 #> 19               0.6 0.714285714285714 0.473684210526316 #> 20               0.8 0.833333333333333 0.473684210526316 #> 21               0.2 0.555555555555556 0.473684210526316 #> 22 0.166666666666667 0.285714285714286 0.473684210526316 #> 23               0.8 0.833333333333333 0.473684210526316 #> 24 0.666666666666667               0.5 0.421052631578947 #> 25                 0               0.4 0.421052631578947 #> 26                 1                 1 0.421052631578947 #> 27               0.8 0.833333333333333 0.473684210526316 #> 28               0.8 0.833333333333333 0.473684210526316 #> 29               0.8 0.833333333333333 0.473684210526316 ModelPerf[[2]]#Overall predictive performance. r2 for regression and MCC for classification #> [1] 0.2856634"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"plotting","dir":"","previous_headings":"","what":"Plotting","title":"Multi Response Interpretable Machine Learning","text":"## Effect feature genetic change also wrap flashlight functionality visualize marginal (.e. partial dependencies) conditional (accumulated local effects) effect feature genetic change. Partial dependencies take longer calculate sensitive correlated features","code":"bs_impVI <- mrvip(   mrBootstrap_obj = NULL,   yhats = yhats_rf,   X = X,   Y = Y,   mode = 'classification',   threshold = 0.8,   global_top_var = 10,   local_top_var = 5,   taxa = 'pol_132',   ModelPerf = ModelPerf) #> [1] \"here\"  bs_impVI[[3]] #importance bs_impVI[[4]] #PCA flashlightObj <- mrFlashlight(yhats_rf,                               X=X,                               Y=Y,                               response = \"single\",                               index=1,                               mode='classification')  #plot prediction scatter for all responses. Gets busy with  plot(light_scatter(flashlightObj,                    v = \"Forest\",                    type = \"predicted\")) #plots everything on one plot (partial dependency, ALE, scatter) plot(light_effects(flashlightObj,                    v = \"Grassland\"),                    use = \"all\") profileData_ale <- light_profile(flashlightObj,                                  v = \"Grassland\",                                  type = \"ale\") #accumulated local effects  mrProfileplot(profileData_ale,               sdthresh =0.01) #>  Press [enter] to continue to the global summary plot #the second plot is the cumulative turnover function"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"interacting-predictors-or-features","dir":"","previous_headings":"","what":"Interacting predictors or features","title":"Multi Response Interpretable Machine Learning","text":"Finally, can assess features interact overall shape genetic change. warned memory intensive. Future updates package enable users visualize interactions explore detail using 2D ALE plots example.","code":"int_ <- mrInteractions(yhats=yhats_rf,                        X,                        Y,                        num_bootstrap=10,                        feature = 'Plas',                         top.int=10) #10 bootstraps to keep it short. top int focusses on the 10 top interactions (all of them in this case).  int_[[1]] # overall plot #int_[[2]] # individual plot for the response of choice  #int_[[3]] # two way plot"},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"recent-mriml-publications","dir":"","previous_headings":"","what":"Recent mrIML publications","title":"Multi Response Interpretable Machine Learning","text":"Fountain-Jones, N. M., Kozakiewicz, C. P., Forester, B. R., Landguth, E. L., Carver, S., Charleston, M., Gagne, R. B., Greenwell, B., Kraberger, S., Trumbo, D. R., Mayer, M., Clark, N. J., & Machado, G. (2021). MrIML: Multi-response interpretable machine learning model genomic landscapes. Molecular Ecology Resources, 21, 2766– 2781. https://doi.org/10.1111/1755-0998.13495 Sykes, . L., Silva, G. S., Holtkamp, D. J., Mauch, B. W., Osemeke, O., Linhares, D. C.L., & Machado, G. (2021). Interpretable machine learning applied -farm biosecurity porcine reproductive respiratory syndrome virus. Transboundary Emerging Diseases, 00, 1– 15. https://doi.org/10.1111/tbed.14369","code":""},{"path":"https://github.com/nickfountainjones/mrIML/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Multi Response Interpretable Machine Learning","text":"Xing, L, Lesperance, ML Zhang, X (2020). Simultaneous prediction multiple outcomes using revised stacking algorithms. Bioinformatics, 36, 65-72. doi:10.1093/bioinformatics/btz531. Fitzpatrick, M.C. & Keller, S.R. (2015) Ecological genomics meets community-level modelling biodiversity: mapping genomic landscape current future environmental adaptation. Ecology Letters 18, 1–16.doi.org/10.1111/ele.12376 Ellis, N., Smith, S.J. Pitcher, C.R. (2012), Gradient forests: calculating importance gradients physical predictors. Ecology, 93: 156-168. doi:10.1890/11-0252.1","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/filterRareCommon.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rare response variables from the data — filterRareCommon","title":"Filter rare response variables from the data — filterRareCommon","text":"Filter rare response variables data","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/filterRareCommon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rare response variables from the data — filterRareCommon","text":"","code":"filterRareCommon(X, lower = lower, higher = higher)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/filterRareCommon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rare response variables from the data — filterRareCommon","text":"X data.frame rows sites individuals populations columns loci species OTUs. lower lower threshold value  response varialkes removed data.frame. higher upper threshold value  response varialkes removed data.frame.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/filterRareCommon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter rare response variables from the data — filterRareCommon","text":"function allows remove response units (OTUs SNPs species) response data preprocessing step. Suitable response binary outcome.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/filterRareCommon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter rare response variables from the data — filterRareCommon","text":"","code":"if (FALSE) { # \\dontrun{    X <- filterRareCommon(Responsedata, lower = 0.4, higher = 0.7) } # }"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap mrIML model predictions — mrBootstrap","title":"Bootstrap mrIML model predictions — mrBootstrap","text":"function bootstraps model predictions generates variable profiles response variable.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap mrIML model predictions — mrBootstrap","text":"","code":"mrBootstrap(mrIMLobj, num_bootstrap = 10, downsample = FALSE)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap mrIML model predictions — mrBootstrap","text":"mrIMLobj list object output mrIMLpredicts(). num_bootstrap number bootstrap samples generate (default: 10). downsample Logical. bootstrap samples downsampled? (default: FALSE).","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap mrIML model predictions — mrBootstrap","text":"list containing bootstrap samples variable profiles response variable.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrBootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap mrIML model predictions — mrBootstrap","text":"","code":"!identical(Sys.getenv(\"NOT_CRAN\"), \"true\") #> [1] FALSE library(tidymodels) #> ── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ── #> ✔ broom        1.0.8     ✔ recipes      1.3.0 #> ✔ dials        1.4.0     ✔ rsample      1.3.0 #> ✔ dplyr        1.1.4     ✔ tibble       3.2.1 #> ✔ ggplot2      3.5.2     ✔ tidyr        1.3.1 #> ✔ infer        1.0.8     ✔ tune         1.3.0 #> ✔ modeldata    1.4.0     ✔ workflows    1.2.0 #> ✔ parsnip      1.3.1     ✔ workflowsets 1.1.0 #> ✔ purrr        1.0.4     ✔ yardstick    1.3.2 #> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── #> ✖ purrr::discard() masks scales::discard() #> ✖ dplyr::filter()  masks stats::filter() #> ✖ dplyr::lag()     masks stats::lag() #> ✖ recipes::step()  masks stats::step()  data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos)  # Specify a random forest tidy model model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  # cl <- parallel::makeCluster(5) # future::plan(cluster, workers=cl)  mrIML_bootstrap <- mrIML_rf %>%   mrBootstrap(   num_bootstrap = 50   ) #>    |                                                                               |                                                                      |   0%   |                                                                               |=                                                                     |   1%   |                                                                               |=                                                                     |   2%   |                                                                               |==                                                                    |   2%   |                                                                               |==                                                                    |   3%   |                                                                               |==                                                                    |   4%   |                                                                               |===                                                                   |   4%   |                                                                               |====                                                                  |   5%   |                                                                               |====                                                                  |   6%   |                                                                               |=====                                                                 |   6%   |                                                                               |=====                                                                 |   7%   |                                                                               |=====                                                                 |   8%   |                                                                               |======                                                                |   8%   |                                                                               |======                                                                |   9%   |                                                                               |=======                                                               |  10%   |                                                                               |========                                                              |  11%   |                                                                               |========                                                              |  12%   |                                                                               |=========                                                             |  12%   |                                                                               |=========                                                             |  13%   |                                                                               |=========                                                             |  14%   |                                                                               |==========                                                            |  14%   |                                                                               |==========                                                            |  15%   |                                                                               |===========                                                           |  16%   |                                                                               |============                                                          |  16%   |                                                                               |============                                                          |  17%   |                                                                               |============                                                          |  18%   |                                                                               |=============                                                         |  18%   |                                                                               |=============                                                         |  19%   |                                                                               |==============                                                        |  20%   |                                                                               |===============                                                       |  21%   |                                                                               |===============                                                       |  22%   |                                                                               |================                                                      |  22%   |                                                                               |================                                                      |  23%   |                                                                               |================                                                      |  24%   |                                                                               |=================                                                     |  24%   |                                                                               |==================                                                    |  25%   |                                                                               |==================                                                    |  26%   |                                                                               |===================                                                   |  26%   |                                                                               |===================                                                   |  27%   |                                                                               |===================                                                   |  28%   |                                                                               |====================                                                  |  28%   |                                                                               |====================                                                  |  29%   |                                                                               |=====================                                                 |  30%   |                                                                               |======================                                                |  31%   |                                                                               |======================                                                |  32%   |                                                                               |=======================                                               |  32%   |                                                                               |=======================                                               |  33%   |                                                                               |=======================                                               |  34%   |                                                                               |========================                                              |  34%   |                                                                               |========================                                              |  35%   |                                                                               |=========================                                             |  36%   |                                                                               |==========================                                            |  36%   |                                                                               |==========================                                            |  37%   |                                                                               |==========================                                            |  38%   |                                                                               |===========================                                           |  38%   |                                                                               |===========================                                           |  39%   |                                                                               |============================                                          |  40%   |                                                                               |=============================                                         |  41%   |                                                                               |=============================                                         |  42%   |                                                                               |==============================                                        |  42%   |                                                                               |==============================                                        |  43%   |                                                                               |==============================                                        |  44%   |                                                                               |===============================                                       |  44%   |                                                                               |================================                                      |  45%   |                                                                               |================================                                      |  46%   |                                                                               |=================================                                     |  46%   |                                                                               |=================================                                     |  47%   |                                                                               |=================================                                     |  48%   |                                                                               |==================================                                    |  48%   |                                                                               |==================================                                    |  49%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================                                  |  51%   |                                                                               |====================================                                  |  52%   |                                                                               |=====================================                                 |  52%   |                                                                               |=====================================                                 |  53%   |                                                                               |=====================================                                 |  54%   |                                                                               |======================================                                |  54%   |                                                                               |======================================                                |  55%   |                                                                               |=======================================                               |  56%   |                                                                               |========================================                              |  56%   |                                                                               |========================================                              |  57%   |                                                                               |========================================                              |  58%   |                                                                               |=========================================                             |  58%   |                                                                               |=========================================                             |  59%   |                                                                               |==========================================                            |  60%   |                                                                               |===========================================                           |  61%   |                                                                               |===========================================                           |  62%   |                                                                               |============================================                          |  62%   |                                                                               |============================================                          |  63%   |                                                                               |============================================                          |  64%   |                                                                               |=============================================                         |  64%   |                                                                               |==============================================                        |  65%   |                                                                               |==============================================                        |  66%   |                                                                               |===============================================                       |  66%   |                                                                               |===============================================                       |  67%   |                                                                               |===============================================                       |  68%   |                                                                               |================================================                      |  68%   |                                                                               |================================================                      |  69%   |                                                                               |=================================================                     |  70%   |                                                                               |==================================================                    |  71%   |                                                                               |==================================================                    |  72%   |                                                                               |===================================================                   |  72%   |                                                                               |===================================================                   |  73%   |                                                                               |===================================================                   |  74%   |                                                                               |====================================================                  |  74%   |                                                                               |====================================================                  |  75%   |                                                                               |=====================================================                 |  76%   |                                                                               |======================================================                |  76%   |                                                                               |======================================================                |  77%   |                                                                               |======================================================                |  78%   |                                                                               |=======================================================               |  78%   |                                                                               |=======================================================               |  79%   |                                                                               |========================================================              |  80%   |                                                                               |=========================================================             |  81%   |                                                                               |=========================================================             |  82%   |                                                                               |==========================================================            |  82%   |                                                                               |==========================================================            |  83%   |                                                                               |==========================================================            |  84%   |                                                                               |===========================================================           |  84%   |                                                                               |============================================================          |  85%   |                                                                               |============================================================          |  86%   |                                                                               |=============================================================         |  86%   |                                                                               |=============================================================         |  87%   |                                                                               |=============================================================         |  88%   |                                                                               |==============================================================        |  88%   |                                                                               |==============================================================        |  89%   |                                                                               |===============================================================       |  90%   |                                                                               |================================================================      |  91%   |                                                                               |================================================================      |  92%   |                                                                               |=================================================================     |  92%   |                                                                               |=================================================================     |  93%   |                                                                               |=================================================================     |  94%   |                                                                               |==================================================================    |  94%   |                                                                               |==================================================================    |  95%   |                                                                               |===================================================================   |  96%   |                                                                               |====================================================================  |  96%   |                                                                               |====================================================================  |  97%   |                                                                               |====================================================================  |  98%   |                                                                               |===================================================================== |  98%   |                                                                               |===================================================================== |  99%   |                                                                               |======================================================================| 100%"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCoOccurNet.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a MrIML co-occurrence network — mrCoOccurNet","title":"Generate a MrIML co-occurrence network — mrCoOccurNet","text":"function generates co-occurrence network provided list calculates strength directionality relationships.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCoOccurNet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a MrIML co-occurrence network — mrCoOccurNet","text":"","code":"mrCoOccurNet(mrBootstrap_obj)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCoOccurNet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a MrIML co-occurrence network — mrCoOccurNet","text":"mrBootstrap_obj bootstrapped partial dependencies output mrBootstrap().","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCoOccurNet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a MrIML co-occurrence network — mrCoOccurNet","text":"data frame representing co-occurrence network edge strengths directionality.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCoOccurNet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a MrIML co-occurrence network — mrCoOccurNet","text":"","code":"if (FALSE) { # !identical(Sys.getenv(\"NOT_CRAN\"), \"true\") library(tidymodels) library(igraph) library(ggnetwork)  data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   dplyr::select(order(everything())) X <- data %>%   select(scale.prop.zos)  model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 )  mrIML_rf_boot <- mrIML_rf %>%   mrBootstrap()  assoc_net_filtered <- mrIML_rf_boot %>%    mrCoOccurNet_bootstrap() %>%   filter(mean_strength > 0.05)   #convert to igraph g <- graph_from_data_frame(   assoc_net_filtered,   directed = TRUE,   vertices = names(Y) ) E(g)$Value <- assoc_net_filtered$mean_strength E(g)$Color <- ifelse(   assoc_net_filtered$direction == \"negative\",   \"blue\", \"red\" ) # Convert the igraph object to a ggplot object with NMDS layout gg <- ggnetwork(g) # Plot the graph ggplot(   gg,   aes(x = x, y = y, xend = xend, yend = yend) ) +  geom_edges(    aes(color = Color, linewidth = Value),    curvature = 0.2,    arrow = arrow(length = unit(5, \"pt\"), type = \"closed\")  ) +  geom_nodes(    color = \"gray\",    size = degree(g, mode = \"out\") / 2  ) +  scale_color_identity() +  theme_void() +  theme(legend.position = \"none\")  +  geom_nodelabel_repel(    aes(label = name),    box.padding = unit(0.5, \"lines\"),    size = 2,    segment.colour = \"black\",    colour = \"white\",    fill = \"grey36\"  ) }"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCovar.html","id":null,"dir":"Reference","previous_headings":"","what":"Investigate partial dependencies of a covariate for mrIML JSDMs (Joint species distirbution models) — mrCovar","title":"Investigate partial dependencies of a covariate for mrIML JSDMs (Joint species distirbution models) — mrCovar","text":"function wrapper around mrFlashlight() plots covariate partial dependencies specified environmental/host variable. also filters taxa based standard deviation thresholds.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCovar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Investigate partial dependencies of a covariate for mrIML JSDMs (Joint species distirbution models) — mrCovar","text":"","code":"mrCovar(mrIMLobj, var, sdthresh = 0.05, ...)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCovar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Investigate partial dependencies of a covariate for mrIML JSDMs (Joint species distirbution models) — mrCovar","text":"mrIMLobj list object output mrIMLpredicts(). var variable interest calculating profile. sdthresh standard deviation threshold filtering taxa (default: 0.05). ... Arguments passed flashlight::light_profile()","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCovar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Investigate partial dependencies of a covariate for mrIML JSDMs (Joint species distirbution models) — mrCovar","text":"list figures: $partial_dep_curves: covariate partial dependence profiles models meet sdthreshold requirement $partial_dep_avg: average partial dependence profile models. indervidual model partial dependence profiles silhouetted background. $partial_dep_diff: distribution rates change probability specified variable (derivatives PD curves). Useful identify key threshold values variable.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrCovar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Investigate partial dependencies of a covariate for mrIML JSDMs (Joint species distirbution models) — mrCovar","text":"","code":"library(tidymodels)  # Without bootstrap data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos)  model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  mrIML_rf %>%   mrCovar(var = \"scale.prop.zos\", sdthresh = 0.05) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrFlashlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert mrIML object into a flashlight object — mrFlashlight","title":"Convert mrIML object into a flashlight object — mrFlashlight","text":"wrapper function around flashlight::flashlight() run multi-response model agnostic interpretable machine learning analyses. output can interrogated using core functionality flashlight: see `vignette(\"flashlight\", package = \"flashlight\")'.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrFlashlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert mrIML object into a flashlight object — mrFlashlight","text":"","code":"mrFlashlight(mrIMLobj, response = \"multi\", index = 1, predict_function = NULL)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrFlashlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert mrIML object into a flashlight object — mrFlashlight","text":"mrIMLobj list object output mrIMLpredicts(). response character string indicating type response: \"single\" selects one response (indicated index) \"multi\" selects responses. index numeric value used response \"single\" select response column data create flashlight object . predict_function function specifying user-defined prediction function (optional).","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrFlashlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert mrIML object into a flashlight object — mrFlashlight","text":"flashlight multi-flashlight object.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrFlashlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert mrIML object into a flashlight object — mrFlashlight","text":"","code":"library(tidymodels) library(flashlight)  data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos)  model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  fl <- mrFlashlight(   mrIML_rf,   response = \"multi\",   index = 1 )  # Performance comparison fl %>%   light_performance(     metrics = list(`ROC AUC` = MetricsWeighted::AUC)   ) %>%   plot() +   ylim(0, 1)     # Partial dependence curves fl %>%   light_profile(data = cbind(X, Y), \"scale.prop.zos\") %>%   plot()     # Two-way partial dependence fl %>%   light_profile2d(c(\"scale.prop.zos\",\"Plas\")) %>%   plot()"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIML-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mrIML: Multi Response Interpretable Machine Learning — mrIML-package","title":"mrIML: Multi Response Interpretable Machine Learning — mrIML-package","text":"package aims enable users build interpret multivariate machine learning models harnessing tidyverse (tidy model syntax particular). package builds ideas Gradient Forests (Ellis et al 2012), ecological genomic approaches (Fitzpatrick Keller, 2014) multi-response stacking algorithms (Xing et al 2019).","code":""},{"path":[]},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIML-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mrIML: Multi Response Interpretable Machine Learning — mrIML-package","text":"Maintainer: Nick Fountain-Jones nfountainjones@gmail.com (ORCID) Authors: Gustavo Machado gmachad@ncsu.edu (ORCID) Chris Kozakiewicz Nick Clark","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLperformance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate general performance metrics of a mrIML model — mrIMLperformance","title":"Calculate general performance metrics of a mrIML model — mrIMLperformance","text":"Summarizes performance mrIML object created using mrIMLpredicts() way different models can easily compared. regression models, root mean squared error (RMSE) R-squared reported, classification models, area ROC (AUC), Mathews correlation coefficient (MMC), positive predictive value (PPC), specificity, sensitivity reported.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLperformance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate general performance metrics of a mrIML model — mrIMLperformance","text":"","code":"mrIMLperformance(mrIMLobj)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLperformance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate general performance metrics of a mrIML model — mrIMLperformance","text":"mrIMLobj list object created mrIMLpredicts() containing multi-response models.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLperformance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate general performance metrics of a mrIML model — mrIMLperformance","text":"list two slots. $model_performance: tibble commonly used metric can used compare model performance classification models. Performance metrics based test data defined mrIMLpredicts(). $global_performance_summary: global performance metric: average performance metric response models. MMC used classification models RMSE regression model.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLperformance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate general performance metrics of a mrIML model — mrIMLperformance","text":"","code":"library(tidymodels)  data <- MRFcov::Bird.parasites  # Prepare data for mrIML Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos) X1 <- Y  # Fit GN model model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  GN_model_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = X1,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  perf <- mrIMLperformance(GN_model_rf) #> Warning: NAs produced when calculating MCC. This is common when there is a class imbalance. Substituting NA values with zero. perf[[1]] #> # A tibble: 4 × 8 #>   response     model_name roc_AUC   mcc sensitivity   ppv specificity prevalence #>   <chr>        <chr>        <dbl> <dbl>       <dbl> <dbl>       <dbl>      <dbl> #> 1 Hzosteropis  rand_fore…   0.911 0.708       0.908 0.927       0.811     0.265  #> 2 Hkillangoi   rand_fore…   0.815 0.214       0.974 0.868       0.15      0.116  #> 3 Plas         rand_fore…   0.815 0.321       0.935 0.840       0.321     0.196  #> 4 Microfilaria rand_fore…   0.941 0           1     0.911       0         0.0980 perf[[2]] #> [1] 0.3105738"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLpredicts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a multi-response predictive model — mrIMLpredicts","title":"Generates a multi-response predictive model — mrIMLpredicts","text":"function fits separate classification/regression models, specified tidymodels framework, response variable data set. core function mrIML.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLpredicts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a multi-response predictive model — mrIMLpredicts","text":"","code":"mrIMLpredicts(   X,   X1 = NULL,   Y,   Model,   balance_data = \"no\",   dummy = FALSE,   prop = 0.7,   tune_grid_size = 10,   k = 10,   racing = TRUE )"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLpredicts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a multi-response predictive model — mrIMLpredicts","text":"Y, X, X1 Data frames containing response, predictor, join response variables (fitting GN model) respectively. X1 provided standard multi-response model fit data (.e. response values independent conditional predictors). See Details section bellow. Model model tidymodels package. See examples. balance_data character string. \"\": -samples data equal class sizes. \"\": -samples data equal class sizes. \"\": leaves data . \"\" default value. dummy logical value indicating recipes::step_dummy() included data recipe. prop numeric value 0 1. Defines training-testing data proportion used, defaults prop = 0.7. tune_grid_size numeric value sets grid size hyperparameter tuning. Larger grid sizes increase computational time. Ignored racing = TRUE. k numeric value. Sets number folds cross-validation. 10-fold CV default. racing logical value. TRUE, mrIML performs grid search using finetune::tune_race_anova() method. racing = TRUE now default method tuning.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLpredicts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a multi-response predictive model — mrIMLpredicts","text":"list object three slots: $Model: tidymodels object fit. $Data: list raw data. $Fits: list fitted models response variable.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLpredicts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a multi-response predictive model — mrIMLpredicts","text":"Additional details two types model... finer details things balance_data...","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrIMLpredicts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a multi-response predictive model — mrIMLpredicts","text":"","code":"library(tidymodels)  data <- MRFcov::Bird.parasites  # Define the response variables of interest Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything()))  # Define the predictors X <- data %>%   select(scale.prop.zos)  # Specify a random forest tidy model model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  model_lm <- logistic_reg()  # Fitting independent multi-response mode ----------------------------------- # Random forest MR_model_rf <- mrIMLpredicts(   X = X,   Y = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  # Linear model MR_model_lm <- mrIMLpredicts(   X = X,   Y = Y,   Model = model_lm,   prop = 0.7,   k = 5,   racing = FALSE # Currently a bug if racing = TRUE for non-tuneable models! ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100% #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters?  # Fitting a graphical network model -----------------------------------------  # Define the dependent response variables (all in this case) X1 <- Y  GN_model <- mrIMLpredicts(   X = X,   Y = Y,   X1 = X1,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrInteractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and visualize feature interactions — mrInteractions","title":"Calculate and visualize feature interactions — mrInteractions","text":"wrapper around hstats::hstats(). Calculates visualizes H-statistics interactions model using bootstrapping. See help(\"hstats\") details H-statistics.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrInteractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and visualize feature interactions — mrInteractions","text":"","code":"mrInteractions(mrIMLobj, num_bootstrap = 1, feature = NULL, top_int = 10)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrInteractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and visualize feature interactions — mrInteractions","text":"mrIMLobj list object output mrIMLpredicts(). num_bootstrap number bootstrap samples generate (default: 1). feature feature interactions need calculated. top_int number top interactions display (default: 10).","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrInteractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and visualize feature interactions — mrInteractions","text":"list containing $p_h2: ordered bar-plot variability response model unexplained main effects. $p_h2_overall: ordered bar-plot percentage prediction variability can attributed interaction predictor model specified feature. $p_h2_pairwise: ordered bar-plot strength two-way interactions model specified feature. Strength interaction taken un-normalized square root H2-pairwise statistic (prediction scale). $h2_df: data frame H2 statistics response model, bootstraps applicable. $h2_overall_df: data frame H2-overall statistics variable response model, bootstraps applicable. $h2_pairwise_df: data frame H2-pairwise statistics variable response model, bootstraps applicable.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrInteractions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and visualize feature interactions — mrInteractions","text":"","code":"library(tidymodels)  data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos)  # Specify a random forest tidy model model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  mrIML_interactions_rf <- mrInteractions(   mrIML_rf,   num_bootstrap = 10,   feature = \"Plas\" )  mrIML_interactions_rf[[1]]  mrIML_interactions_rf[[2]]  mrIML_interactions_rf[[3]]"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPdPlotBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Partial Dependence plots — mrPdPlotBootstrap","title":"Bootstrap Partial Dependence plots — mrPdPlotBootstrap","text":"function bootstraps model predictions generates partial dependence plots response variable. also creates combined plot top variables interest.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPdPlotBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Partial Dependence plots — mrPdPlotBootstrap","text":"","code":"mrPdPlotBootstrap(   mrIML_obj,   mrBootstrap_obj,   vi_obj = NULL,   target,   global_top_var = 2 )"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPdPlotBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Partial Dependence plots — mrPdPlotBootstrap","text":"mrIML_obj list object returned mrIMLpredicts(). mrBootstrap_obj list object returned mrBootstrap(). vi_obj list object returned mrVip(). vi_obj provided created inside mrPD_bootstrap running mrVip() target target variable generating plots. global_top_var number top variables consider (default: 2).","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPdPlotBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Partial Dependence plots — mrPdPlotBootstrap","text":"list containing partial dependence plots response variable combined plot???","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPdPlotBootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Partial Dependence plots — mrPdPlotBootstrap","text":"","code":"library(tidymodels)  data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   dplyr::select(order(everything())) X <- data %>%   select(scale.prop.zos)  model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  mrIML_rf_boot <- mrIML_rf %>%   mrBootstrap() #>    |                                                                               |                                                                      |   0%   |                                                                               |==                                                                    |   2%   |                                                                               |====                                                                  |   5%   |                                                                               |=====                                                                 |   8%   |                                                                               |=======                                                               |  10%   |                                                                               |=========                                                             |  12%   |                                                                               |==========                                                            |  15%   |                                                                               |============                                                          |  18%   |                                                                               |==============                                                        |  20%   |                                                                               |================                                                      |  22%   |                                                                               |==================                                                    |  25%   |                                                                               |===================                                                   |  28%   |                                                                               |=====================                                                 |  30%   |                                                                               |=======================                                               |  32%   |                                                                               |========================                                              |  35%   |                                                                               |==========================                                            |  38%   |                                                                               |============================                                          |  40%   |                                                                               |==============================                                        |  42%   |                                                                               |================================                                      |  45%   |                                                                               |=================================                                     |  48%   |                                                                               |===================================                                   |  50%   |                                                                               |=====================================                                 |  52%   |                                                                               |======================================                                |  55%   |                                                                               |========================================                              |  58%   |                                                                               |==========================================                            |  60%   |                                                                               |============================================                          |  62%   |                                                                               |==============================================                        |  65%   |                                                                               |===============================================                       |  68%   |                                                                               |=================================================                     |  70%   |                                                                               |===================================================                   |  72%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================                |  78%   |                                                                               |========================================================              |  80%   |                                                                               |==========================================================            |  82%   |                                                                               |============================================================          |  85%   |                                                                               |=============================================================         |  88%   |                                                                               |===============================================================       |  90%   |                                                                               |=================================================================     |  92%   |                                                                               |==================================================================    |  95%   |                                                                               |====================================================================  |  98%   |                                                                               |======================================================================| 100%    mrIML_rf_PD <- mrPdPlotBootstrap(   mrIML_rf,   mrIML_rf_boot,   target = \"Plas\",   global_top_var = 4 ) #> Warning: NAs produced when calculating MCC. This is common when there is a class imbalance. Substituting NA values with zero.  head(mrIML_rf_PD[[1]]) #>              var     X counts      value label               type bootstrap #> 1 scale.prop.zos -1.75    449 0.24071269 class partial dependence         1 #> 2 scale.prop.zos -1.25    449 0.36394209 class partial dependence         1 #> 3 scale.prop.zos -0.75    449 0.36144766 class partial dependence         1 #> 4 scale.prop.zos -0.25    449 0.67710468 class partial dependence         1 #> 5 scale.prop.zos  0.25    449 0.81227171 class partial dependence         1 #> 6 scale.prop.zos  0.75    449 0.01042316 class partial dependence         1 #>      response #> 1 Hzosteropis #> 2 Hzosteropis #> 3 Hzosteropis #> 4 Hzosteropis #> 5 Hzosteropis #> 6 Hzosteropis mrIML_rf_PD[[2]]"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPerformancePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Performance Comparison — mrPerformancePlot","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"Create visualizations compare performance two models based performance metrics generated mrIMLperformance.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPerformancePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"","code":"mrPerformancePlot(   ModelPerf1 = NULL,   ModelPerf2 = NULL,   mode = \"classification\" )"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPerformancePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"ModelPerf1, ModelPerf2 data frame model performance metrics compare. dataframe created mrIMLperformance, see Examples. mode character string describing mode models. either \"regression\" \"classification\". default \"classification\".","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPerformancePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"list containing: $performance_plot: ggplot object boxplot model performance metrics. $performance_diff_plot: ggplot object barplot differences performance metrics. $performance_diff_df: dataframe wide format model performance metrics differences.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrPerformancePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"","code":"library(tidymodels)  data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos)  # Specify a random forest tidy model model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\") model_lm <- logistic_reg()  MR_perf_rf <- mrIMLpredicts(   X = X,   Y = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) %>%   mrIMLperformance() #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100% #> Warning: NAs produced when calculating MCC. This is common when there is a class imbalance. Substituting NA values with zero. MR_perf_lm <- mrIMLpredicts(   X = X,   Y = Y,   Model = model_lm,   prop = 0.7,   k = 5,   racing = FALSE ) %>%   mrIMLperformance() #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100% #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: No tuning parameters have been detected, performance will be evaluated using the resamples with no tuning. Did you want to [tune()] parameters? #> Warning: NAs produced when calculating MCC. This is common when there is a class imbalance. Substituting NA values with zero.  perf_comp <- mrPerformancePlot(   ModelPerf1 = MR_perf_rf,   ModelPerf2 = MR_perf_lm )  perf_comp[[1]] #> Warning: The following aesthetics were dropped during statistical transformation: label. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor?  perf_comp[[2]]  perf_comp[[3]] #> # A tibble: 4 × 6 #>   response  metric_metric_rand_f…¹ metric_metric_logist…² outlier_outlier_rand…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 Hzostero…                  0.550                 0.175                      NA #> 2 Hkillang…                  0                     0                           0 #> 3 Plas                       0.476                 0.0468                     NA #> 4 Microfil…                  0.477                 0                          NA #> # ℹ abbreviated names: ¹​metric_metric_rand_forest, ²​metric_metric_logistic_reg, #> #   ³​outlier_outlier_rand_forest #> # ℹ 2 more variables: outlier_outlier_logistic_reg <dbl>, diff_mod1_2 <dbl>"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVip.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and helps interpret variable importance for mrIML models. — mrVip","title":"Calculates and helps interpret variable importance for mrIML models. — mrVip","text":"Summarizes variable importance mrIML model global (accross response models) local (individual response models). can done plain mrIML model bootstrap results obtained mrBootstrap().","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and helps interpret variable importance for mrIML models. — mrVip","text":"","code":"mrVip(   mrIMLobj,   mrBootstrap_obj = NULL,   threshold = 0.1,   global_top_var = 10,   local_top_var = 5,   taxa = NULL,   model_perf = NULL )"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and helps interpret variable importance for mrIML models. — mrVip","text":"mrIMLobj list object output mrIMLpredicts(). mrBootstrap_obj list bootstrap results output mrBootstrap(). threshold performance threshold response models (AUC classification $R^2$ regression). response models meet performance criteria plotted. global_top_var number top global variables display (default: 10). local_top_var number top local variables response display (default: 5). taxa character string identifying response model plotted. model_perf list object containing model performance metrics output mrIMLperformance(). supplied mrIMLperformance() run inside mrvip() get performance metrics.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and helps interpret variable importance for mrIML models. — mrVip","text":"list : $vi_data: Variable importance data raw form (including bootstrap samples mrBootstrap_obj supplied). $vi_tbl: Variable importance data point estimates. $vi_plot: group plot important variables globally individual response models.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and helps interpret variable importance for mrIML models. — mrVip","text":"","code":"library(tidymodels)  # Without bootstrap data <- MRFcov::Bird.parasites Y <- data %>%   select(-scale.prop.zos) %>%   select(order(everything())) X <- data %>%   select(scale.prop.zos)  model_rf <- rand_forest(   trees = 100, # 100 trees are set for brevity. Aim to start with 1000   mode = \"classification\",   mtry = tune(),   min_n = tune() ) %>%   set_engine(\"randomForest\")  mrIML_rf <- mrIMLpredicts(   X = X,   Y = Y,   X1 = Y,   Model = model_rf,   prop = 0.7,   k = 5 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100%  mrVip(mrIML_rf, taxa = \"Plas\") #> [[1]] #> # A tibble: 16 × 4 #>    var            sd_value response     bootstrap #>    <chr>             <dbl> <chr>        <lgl>     #>  1 Hkillangoi      0.178   Hzosteropis  NA        #>  2 Microfilaria    0.181   Hzosteropis  NA        #>  3 Plas            0.142   Hzosteropis  NA        #>  4 scale.prop.zos  0.309   Hzosteropis  NA        #>  5 Hzosteropis     0.0833  Hkillangoi   NA        #>  6 Microfilaria    0.00323 Hkillangoi   NA        #>  7 Plas            0.0628  Hkillangoi   NA        #>  8 scale.prop.zos  0.151   Hkillangoi   NA        #>  9 Hkillangoi      0.0730  Plas         NA        #> 10 Hzosteropis     0.102   Plas         NA        #> 11 Microfilaria    0.0417  Plas         NA        #> 12 scale.prop.zos  0.373   Plas         NA        #> 13 Hkillangoi      0.00797 Microfilaria NA        #> 14 Hzosteropis     0.0385  Microfilaria NA        #> 15 Plas            0.0467  Microfilaria NA        #> 16 scale.prop.zos  0.138   Microfilaria NA        #>  #> [[2]] #>                 Hkillangoi Hzosteropis Microfilaria       Plas #> Hzosteropis    0.083293714   0.2025861  0.038489287 0.10160920 #> Microfilaria   0.003228439   0.1812020  0.057817604 0.04171773 #> Plas           0.062757695   0.1424450  0.046709994 0.14722281 #> scale.prop.zos 0.151181637   0.3088971  0.138102406 0.37257011 #> Hkillangoi     0.075115371   0.1778003  0.007968731 0.07299421 #>  #> [[3]]  #>   # With bootstrap  mrIML_rf_boot <- mrIML_rf %>%   mrBootstrap() #>    |                                                                               |                                                                      |   0%   |                                                                               |==                                                                    |   2%   |                                                                               |====                                                                  |   5%   |                                                                               |=====                                                                 |   8%   |                                                                               |=======                                                               |  10%   |                                                                               |=========                                                             |  12%   |                                                                               |==========                                                            |  15%   |                                                                               |============                                                          |  18%   |                                                                               |==============                                                        |  20%   |                                                                               |================                                                      |  22%   |                                                                               |==================                                                    |  25%   |                                                                               |===================                                                   |  28%   |                                                                               |=====================                                                 |  30%   |                                                                               |=======================                                               |  32%   |                                                                               |========================                                              |  35%   |                                                                               |==========================                                            |  38%   |                                                                               |============================                                          |  40%   |                                                                               |==============================                                        |  42%   |                                                                               |================================                                      |  45%   |                                                                               |=================================                                     |  48%   |                                                                               |===================================                                   |  50%   |                                                                               |=====================================                                 |  52%   |                                                                               |======================================                                |  55%   |                                                                               |========================================                              |  58%   |                                                                               |==========================================                            |  60%   |                                                                               |============================================                          |  62%   |                                                                               |==============================================                        |  65%   |                                                                               |===============================================                       |  68%   |                                                                               |=================================================                     |  70%   |                                                                               |===================================================                   |  72%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================                |  78%   |                                                                               |========================================================              |  80%   |                                                                               |==========================================================            |  82%   |                                                                               |============================================================          |  85%   |                                                                               |=============================================================         |  88%   |                                                                               |===============================================================       |  90%   |                                                                               |=================================================================     |  92%   |                                                                               |==================================================================    |  95%   |                                                                               |====================================================================  |  98%   |                                                                               |======================================================================| 100%    mrIML_rf_vip <- mrVip(   mrIML_rf,   mrBootstrap_obj = mrIML_rf_boot )  mrIML_rf_vip #> [[1]] #> # A tibble: 160 × 4 #>    var            sd_value response    bootstrap #>    <chr>             <dbl> <chr>           <int> #>  1 Hkillangoi       0.172  Hzosteropis         1 #>  2 Microfilaria     0.316  Hzosteropis         1 #>  3 Plas             0.0690 Hzosteropis         1 #>  4 scale.prop.zos   0.202  Hzosteropis         1 #>  5 Hkillangoi       0.174  Hzosteropis         2 #>  6 Microfilaria     0.123  Hzosteropis         2 #>  7 Plas             0.111  Hzosteropis         2 #>  8 scale.prop.zos   0.275  Hzosteropis         2 #>  9 Hkillangoi       0.153  Hzosteropis         3 #> 10 Microfilaria     0.156  Hzosteropis         3 #> # ℹ 150 more rows #>  #> [[2]] #>                Hkillangoi Hzosteropis Microfilaria       Plas #> Hzosteropis    0.10926296  0.17321647   0.04715725 0.10488016 #> Microfilaria   0.02763386  0.19393309   0.06429046 0.06500973 #> Plas           0.07121148  0.08832535   0.05775283 0.15267268 #> scale.prop.zos 0.18041893  0.25067533   0.12547776 0.34761866 #> Hkillangoi     0.09713181  0.15993212   0.02677399 0.09318219 #>  #> [[3]]  #>   mrIML_rf_vip %>%  mrVipPCA() #> $PCA_plot  #>  #> $PC_outliers #> integer(0) #>  #> $eigenvalues #> [1] 3.153073e+00 1.528723e+00 3.182041e-01 3.603144e-32 #>  #> $PC_scores #> # A tibble: 4 × 5 #>      PC1    PC2    PC3       PC4 response     #>    <dbl>  <dbl>  <dbl>     <dbl> <chr>        #> 1  0.672  0.232  0.812  1.56e-17 Hkillangoi   #> 2 -1.94   1.19  -0.203 -4.13e-16 Hzosteropis  #> 3  2.12   0.316 -0.490 -5.69e-16 Microfilaria #> 4 -0.853 -1.74  -0.119  5.90e-16 Plas         #>"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVipPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principle Component Analysis of mrIML variable importance — mrVipPCA","title":"Principle Component Analysis of mrIML variable importance — mrVipPCA","text":"Principle Component Analysis mrIML variable importance","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVipPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principle Component Analysis of mrIML variable importance — mrVipPCA","text":"","code":"mrVipPCA(mrVip_obj)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVipPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principle Component Analysis of mrIML variable importance — mrVipPCA","text":"mrVip_obj list returned mrVip().","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/mrVipPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principle Component Analysis of mrIML variable importance — mrVipPCA","text":"list PCA results: $PCA_plot $PC_outlires $eigenvalues $PC_scores","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://github.com/nickfountainjones/mrIML/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/readSnpsPed.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"Conversion single column per locus plink file via LEA functionality","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/readSnpsPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"","code":"readSnpsPed(pedfile, mapfile)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/readSnpsPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"pedfile file location. mapfile file location.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/readSnpsPed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"Function import SNP data plink format format suitable MrIML predicts (presence/absence alelle locus). Currently missing data (NAs) either imputes mode leaves . histogram also produced missing data.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/readSnpsPed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"","code":"if (FALSE) { # \\dontrun{  snps <- readSnpsPed(\"bobcat.plink.ped\", \"bobcat.plink.map.map\")  X <- filterRareCommon(snps, lower = 0.4, higher = 0.7)  } # }"},{"path":"https://github.com/nickfountainjones/mrIML/reference/resist_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates resistance components from a list of pairwise resistance surfaces — resist_components","title":"Calculates resistance components from a list of pairwise resistance surfaces — resist_components","text":"Calculates resistance components list pairwise resistance surfaces","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/resist_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates resistance components from a list of pairwise resistance surfaces — resist_components","text":"","code":"resist_components(foldername = foldername, p_val = p_val, cl = NULL)"},{"path":"https://github.com/nickfountainjones/mrIML/reference/resist_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates resistance components from a list of pairwise resistance surfaces — resist_components","text":"foldername character location resistance surfaces stored. p_val numeric sets significance threshold axes explaining variance original resistance matrix based redundancy analysis. effect filters axes explain variance. cl parallel argument passed vegan::capscale() parallel compute wanted.","code":""},{"path":"https://github.com/nickfountainjones/mrIML/reference/resist_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates resistance components from a list of pairwise resistance surfaces — resist_components","text":"Outputs data frame significant resistance components matrix target folder. data can combined non-pairwise matrix data.","code":""},{"path":[]},{"path":"https://github.com/nickfountainjones/mrIML/news/index.html","id":"mriml-101","dir":"Changelog","previous_headings":"","what":"mrIML 1.0.1","title":"mrIML 1.0.1","text":"Initial release github Initial functions vignettes","code":""},{"path":"https://github.com/nickfountainjones/mrIML/news/index.html","id":"mriml-201","dir":"Changelog","previous_headings":"","what":"mrIML 2.0.1","title":"mrIML 2.0.1","text":"New functionality allow MrIML perform joint species distribution models (JSDMs) New bootstrap functions vignette Can also harness deep neural network models","code":""}]
